diff --git a/BUILDING.md b/BUILDING.md
new file mode 100644
index 0000000000000000000000000000000000000000..1e948d442d2680625ae92a429c026e319cdbeaf5
--- /dev/null
+++ b/BUILDING.md
@@ -0,0 +1,35 @@
+# Building Bioms of Infinity
+
+This project uses the [Fabric Loom](https://github.com/FabricMC/fabric-loom) Gradle plugin to
+resolve Minecraft, Yarn mappings, and Fabric API artifacts for Minecraft 1.21.8. The plugin and
+its dependencies are hosted exclusively on `https://maven.fabricmc.net`.
+
+## Network access is required
+
+The Gradle build will fail with an error similar to the following when the Fabric Maven cannot be
+reached:
+
+```
+Plugin [id: 'fabric-loom', version: '1.7.9'] was not found in any of the following sources:
+  ...
+  could not resolve plugin artifact 'fabric-loom:fabric-loom.gradle.plugin:1.7.9'
+  Searched in the following repositories:
+    Fabric(https://maven.fabricmc.net/)
+    MavenRepo
+    Gradle Central Plugin Repository
+```
+
+If you see the `could not resolve plugin artifact 'fabric-loom:...'` message, verify that your
+network or proxy allows HTTPS requests to `https://maven.fabricmc.net`. Without access to that host,
+Gradle cannot download the Loom plugin, Minecraft JAR, Yarn mappings, or Fabric API, and the build
+will abort before compiling any project sources.
+
+To confirm the connectivity issue directly, run:
+
+```
+curl -I https://maven.fabricmc.net/net/fabricmc/fabric-loom/1.7.9/fabric-loom-1.7.9.pom
+```
+
+A `403 Forbidden` or similar response indicates the repository is being blocked upstream. Restoring
+access to the Fabric Maven resolves the build failure—no code changes are required for Minecraft
+1.21.8 beyond configuring the correct Loom and dependency versions.
diff --git a/gradle.properties b/gradle.properties
index 135bb73791c5946b6e85d6e70324325ed2f3ec56..99e28a6cd6176802e944d935b95f67ad1c5c4133 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,21 +1,21 @@
 # Done to increase the memory available to gradle.
 org.gradle.jvmargs=-Xmx1G
 org.gradle.parallel=true
 
 # IntelliJ IDEA is not yet fully compatible with configuration cache, see: https://github.com/FabricMC/fabric-loom/issues/1349
 org.gradle.configuration-cache=false
 
 # Fabric Properties
 # check these on https://fabricmc.net/develop
 minecraft_version=1.21.8
 yarn_mappings=1.21.8+build.1
 loader_version=0.17.2
-loom_version=1.11-SNAPSHOT
+loom_version=1.7.9
 
 # Mod Properties
 mod_version=1.0.0
 maven_group=net.liam.biomsofinfinity
 archives_base_name=bioms-of-infinity
 
 # Dependencies
-fabric_version=0.134.0+1.21.8
\ No newline at end of file
+fabric_version=0.134.0+1.21.8
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java b/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java
index 220baae7455924d4d781ee0f4af0bd608b7be52f..2064fb54ec5e9e1af32cb062a0f45ffc9f58ad3d 100644
--- a/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java
+++ b/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java
@@ -28,28 +28,28 @@ public class Biomsofinfinity implements ModInitializer {
 		// However, some things (like resources) may still be uninitialized.
 		// Proceed with mild caution.
 
 		LOGGER.info("Initializing Bioms of Infinity - Adding mystical dimensions to Minecraft!");
 
 		// Register all mod content
 		ModBlocks.registerModBlocks();
 		ModItems.registerModItems();
 		ModEntities.registerModEntities();
 
 		// --- Dynamic Registry Setup für Worldgen (1.21.x) ---
 		DynamicRegistrySetupCallback.EVENT.register(registryManager -> {
 			// Diese wird automatisch von Fabric aufgerufen wenn die Dynamic Registries geladen werden
 			LOGGER.info("Setting up dynamic registries for worldgen features");
 
 			// Die Biome werden über die ModBiomes-Klasse registriert (diese wird von Fabric automatisch aufgerufen)
 			// Features sind bereits über JSON-Dateien definiert
 		});
 		// --- Ende: Dynamic Registry Setup ---
 
 		ModWorldGeneration.generateModWorldGen();
 
 		// End-Biome Integration nach der Weltgenerierung
 		net.liam.biomsofinfinity.world.biome.EndBiomeIntegration.registerEndBiomes();
 
-		LOGGER.info("Bioms of Infinity loaded successfully! Mist Peaks and Crystal Grove await...");
-	}
+                LOGGER.info("Bioms of Infinity loaded successfully! Seventeen bespoke End biomes await explorers.");
+        }
 }
\ No newline at end of file
diff --git a/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java b/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java
index 6b7c9b36dd9f9067bdc365d155ea10032a3dd867..b6f04eecacc46974cbde15e18c5891cc74f85d59 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java
@@ -1,42 +1,67 @@
 package net.liam.biomsofinfinity.world;
 
 import net.fabricmc.fabric.api.biome.v1.BiomeModifications;
 import net.fabricmc.fabric.api.biome.v1.BiomeSelectors;
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.liam.biomsofinfinity.world.biome.ModBiomes;
 import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
+import net.minecraft.registry.RegistryKey;
 import net.minecraft.world.gen.GenerationStep;
 
 public class ModWorldGeneration {
 
     public static void generateModWorldGen() {
         Biomsofinfinity.LOGGER.info("Registering biome modifications for " + Biomsofinfinity.MOD_ID);
 
-        // Nebelgranit-Adern NUR in Nebelwipfel
+        // Nebelgranit-Adern
+        RegistryKey<net.minecraft.world.biome.Biome>[] mistGraniteBiomes = new RegistryKey[]{
+                ModBiomes.NEBELWIPFEL,
+                ModBiomes.NEBELTAL,
+                ModBiomes.OBSIDIANKLAMM,
+                ModBiomes.NACHTFALLTAL
+        };
         BiomeModifications.addFeature(
-                BiomeSelectors.includeByKey(ModBiomes.NEBELWIPFEL),
+                BiomeSelectors.includeByKey(mistGraniteBiomes),
                 GenerationStep.Feature.UNDERGROUND_ORES,
                 ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY
         );
 
-        // Leuchtendes Moos NUR in beiden custom Biomen
+        // Leuchtendes Moos
+        RegistryKey<net.minecraft.world.biome.Biome>[] glowingMossBiomes = new RegistryKey[]{
+                ModBiomes.NEBELWIPFEL,
+                ModBiomes.KRISTALLHAIN,
+                ModBiomes.STERNENLICHTWALD,
+                ModBiomes.PHOENIXHAIN,
+                ModBiomes.TRAEUMSEEN_EBENEN,
+                ModBiomes.BLUETENPFEILER_SPORN,
+                ModBiomes.JADELABYRINTH,
+                ModBiomes.KRISTALLHUEGEL,
+                ModBiomes.SMARAGDGROTTE,
+                ModBiomes.AURORAKUPPEL,
+                ModBiomes.AETHERWALD,
+                ModBiomes.SEELENSUMPF,
+                ModBiomes.NACHTFALLTAL
+        };
         BiomeModifications.addFeature(
-                BiomeSelectors.includeByKey(ModBiomes.NEBELWIPFEL, ModBiomes.KRISTALLHAIN),
+                BiomeSelectors.includeByKey(glowingMossBiomes),
                 GenerationStep.Feature.VEGETAL_DECORATION,
                 ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY
         );
 
-        // Ethereal Trees NUR im Kristallhain
+        // Ethereal Trees
+        RegistryKey<net.minecraft.world.biome.Biome>[] etherealTreeBiomes = new RegistryKey[]{
+                ModBiomes.KRISTALLHAIN,
+                ModBiomes.STERNENLICHTWALD,
+                ModBiomes.BLUETENPFEILER_SPORN,
+                ModBiomes.AURORAKUPPEL,
+                ModBiomes.AETHERWALD
+        };
         BiomeModifications.addFeature(
-                BiomeSelectors.includeByKey(ModBiomes.KRISTALLHAIN),
+                BiomeSelectors.includeByKey(etherealTreeBiomes),
                 GenerationStep.Feature.VEGETAL_DECORATION,
                 ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY
         );
 
-        // ENTFERNT: Features aus dem gesamten End
-        // Keine Features mehr in foundInTheEnd() Biomen
-
-        Biomsofinfinity.LOGGER.info("Biome modifications registered successfully!");
-        Biomsofinfinity.LOGGER.info("Nebelwipfel and Kristallhain biomes are now available!");
+        Biomsofinfinity.LOGGER.info("Biome modifications registered successfully for 17 End biomes!");
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java b/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java
index 2b59bf6eef99e0b17d05ac3960f8aa2f2a069301..a487d550b0b02dbb88b8cc28764e4678f19149a1 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java
@@ -1,26 +1,49 @@
 package net.liam.biomsofinfinity.world.biome;
 
 import net.fabricmc.fabric.api.biome.v1.TheEndBiomes;
 import net.liam.biomsofinfinity.Biomsofinfinity;
 
 public class EndBiomeIntegration {
 
     public static void registerEndBiomes() {
         try {
             Biomsofinfinity.LOGGER.info("Registering End biomes for " + Biomsofinfinity.MOD_ID);
 
-            // Nebelwipfel als Hochland-Biom (gleichwertig mit End-Hochland)
+            // Highlands - große Endinseln
             TheEndBiomes.addHighlandsBiome(ModBiomes.NEBELWIPFEL, 1.0);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.STERNENLICHTWALD, 0.9);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.PHOENIXHAIN, 0.85);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.JADELABYRINTH, 0.8);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.KRISTALLHUEGEL, 0.75);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.AURORAKUPPEL, 0.7);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.NACHTFALLTAL, 0.9);
 
-            // Kristallhain als kleinere Inseln für mehr Variation
-            TheEndBiomes.addSmallIslandsBiome(ModBiomes.KRISTALLHAIN, 1.0);
+            // Midlands - sanfte Übergänge
+            TheEndBiomes.addMidlandsBiome(ModBiomes.NEBELWIPFEL, ModBiomes.NEBELTAL, 0.8);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.STERNENLICHTWALD, ModBiomes.TRAEUMSEEN_EBENEN, 0.7);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.PHOENIXHAIN, ModBiomes.BLUETENPFEILER_SPORN, 0.6);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.KRISTALLHUEGEL, ModBiomes.KRISTALLHAIN, 0.7);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.JADELABYRINTH, ModBiomes.SMARAGDGROTTE, 0.7);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.AURORAKUPPEL, ModBiomes.AETHERWALD, 0.65);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.NACHTFALLTAL, ModBiomes.SEELENSUMPF, 0.6);
 
-            // Optional: Auch als Mitte-Inseln für Übergänge
-            TheEndBiomes.addMidlandsBiome(ModBiomes.NEBELWIPFEL, ModBiomes.KRISTALLHAIN, 0.5);
+            // Barrens - harsche Randzonen
+            TheEndBiomes.addBarrensBiome(ModBiomes.NEBELWIPFEL, ModBiomes.OBSIDIANKLAMM, 0.6);
+            TheEndBiomes.addBarrensBiome(ModBiomes.NACHTFALLTAL, ModBiomes.PHANTOM_ARCHIPEL, 0.7);
 
-            Biomsofinfinity.LOGGER.info("End biomes registered successfully - Nebelwipfel and Kristallhain are now part of the End dimension!");
+            // Small Islands - abgelegene Inselgruppen
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.KRISTALLHAIN, 0.8);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.AZURKLIPPEN_OASE, 1.2);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.TRAEUMSEEN_EBENEN, 1.1);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.BLUETENPFEILER_SPORN, 0.9);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.SMARAGDGROTTE, 0.9);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.AETHERWALD, 1.0);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.SEELENSUMPF, 0.85);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.PHANTOM_ARCHIPEL, 0.95);
+
+            Biomsofinfinity.LOGGER.info("End biomes registered successfully - 17 custom realms are now part of the End dimension!");
         } catch (Exception e) {
             Biomsofinfinity.LOGGER.warn("Could not register End biomes (this is normal during bootstrap): " + e.getMessage());
         }
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java b/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java
index 14cba9dfa7b69d84e099bce997af72ebf2e85df3..95c78442856e660987d5d4057874aa393b412e26 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java
@@ -1,104 +1,480 @@
 package net.liam.biomsofinfinity.world.biome;
 
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.minecraft.registry.Registerable;
 import net.minecraft.registry.RegistryKey;
 import net.minecraft.registry.RegistryKeys;
 import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.util.Identifier;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeEffects;
 import net.minecraft.world.biome.GenerationSettings;
 import net.minecraft.world.biome.SpawnSettings;
 
 public class ModBiomes {
 
     // Nebelwipfel - mystische Gebirgskette mit schwebenden Inseln
     public static final RegistryKey<Biome> NEBELWIPFEL = RegistryKey.of(RegistryKeys.BIOME,
             Identifier.of(Biomsofinfinity.MOD_ID, "nebelwipfel"));
 
     // Kristallhain - verwunschener Wald aus durchscheinenden Kristallen
     public static final RegistryKey<Biome> KRISTALLHAIN = RegistryKey.of(RegistryKeys.BIOME,
             Identifier.of(Biomsofinfinity.MOD_ID, "kristallhain"));
 
+    public static final RegistryKey<Biome> STERNENLICHTWALD = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "sternenlichtwald"));
+    public static final RegistryKey<Biome> AZURKLIPPEN_OASE = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "azurklippen_oase"));
+    public static final RegistryKey<Biome> PHOENIXHAIN = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "phoenixhain"));
+    public static final RegistryKey<Biome> TRAEUMSEEN_EBENEN = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "traumseen_ebenen"));
+    public static final RegistryKey<Biome> BLUETENPFEILER_SPORN = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "bluetenpfeiler_sporn"));
+    public static final RegistryKey<Biome> JADELABYRINTH = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "jadelabyrinth"));
+    public static final RegistryKey<Biome> KRISTALLHUEGEL = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "kristallhuegel"));
+    public static final RegistryKey<Biome> NEBELTAL = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "nebeltal"));
+    public static final RegistryKey<Biome> SMARAGDGROTTE = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "smaragdgrotte"));
+    public static final RegistryKey<Biome> AURORAKUPPEL = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "aurorakuppel"));
+    public static final RegistryKey<Biome> AETHERWALD = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "aetherwald"));
+    public static final RegistryKey<Biome> PHANTOM_ARCHIPEL = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "phantom_archipel"));
+    public static final RegistryKey<Biome> SEELENSUMPF = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "seelensumpf"));
+    public static final RegistryKey<Biome> OBSIDIANKLAMM = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "obsidianklamm"));
+    public static final RegistryKey<Biome> NACHTFALLTAL = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "nachtfalltal"));
+
     // Legacy Namen für Rückwärtskompatibilität
     public static final RegistryKey<Biome> MIST_PEAKS = NEBELWIPFEL;
     public static final RegistryKey<Biome> CRYSTAL_GROVE = KRISTALLHAIN;
 
     public static void bootstrap(Registerable<Biome> context) {
         context.register(NEBELWIPFEL, createNebelwipfel(context));
         context.register(KRISTALLHAIN, createKristallhain(context));
+        context.register(STERNENLICHTWALD, createSternenlichtwald(context));
+        context.register(AZURKLIPPEN_OASE, createAzurklippenOase(context));
+        context.register(PHOENIXHAIN, createPhoenixhain(context));
+        context.register(TRAEUMSEEN_EBENEN, createTraumseenEbenen(context));
+        context.register(BLUETENPFEILER_SPORN, createBluetenpfeilerSporn(context));
+        context.register(JADELABYRINTH, createJadelabyrinth(context));
+        context.register(KRISTALLHUEGEL, createKristallhuegel(context));
+        context.register(NEBELTAL, createNebeltal(context));
+        context.register(SMARAGDGROTTE, createSmaragdgrotte(context));
+        context.register(AURORAKUPPEL, createAurorakuppel(context));
+        context.register(AETHERWALD, createAetherwald(context));
+        context.register(PHANTOM_ARCHIPEL, createPhantomArchipel(context));
+        context.register(SEELENSUMPF, createSeelensumpf(context));
+        context.register(OBSIDIANKLAMM, createObsidianklamm(context));
+        context.register(NACHTFALLTAL, createNachtfalltal(context));
     }
 
     public static Biome createNebelwipfel(Registerable<Biome> context) {
         SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
-        // Spawn settings für Nebelgeister und Nebelwölfe werden später erweitert
 
-        GenerationSettings.LookupBackedBuilder biomeBuilder =
-                new GenerationSettings.LookupBackedBuilder(context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
-                        context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
 
-        // Füge Mist Granite Ore als Underground Feature hinzu
-        biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.UNDERGROUND_ORES,
-            context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
-                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY));
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.UNDERGROUND_ORES,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY);
 
-        // Füge Glowing Moss als Surface Feature hinzu
-        biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
-            context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
-                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY));
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
 
-        return new Biome.Builder()
-                .precipitation(false) // Kein Regen, nur Nebel
-                .downfall(0.1f) // Sehr wenig Niederschlag
-                .temperature(0.2f) // Kühl in den Bergen
-                .generationSettings(biomeBuilder.build())
-                .spawnSettings(spawnBuilder.build())
-                .effects(new BiomeEffects.Builder()
-                        .waterColor(0x7BB3FF) // Zartes Blau wie beschrieben
-                        .waterFogColor(0x4A90E2) // Mystisches Blau
-                        .skyColor(0xC8E6FF) // Pastellblauer Himmel
-                        .grassColor(0x98FFB3) // Mintgrün für Vegetation
-                        .foliageColor(0xA5FFCC) // Durchscheinende, glühende Blätter
-                        .fogColor(0xE6F3FF) // Heller Nebel wie Geisterschleier
-                        .moodSound(BiomeMoodSound.CAVE)
-                        .build())
-                .build();
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x7BB3FF)
+                        .waterFogColor(0x4A90E2)
+                        .skyColor(0xC8E6FF)
+                        .grassColor(0x98FFB3)
+                        .foliageColor(0xA5FFCC)
+                        .fogColor(0xE6F3FF),
+                0.2f,
+                0.1f);
     }
 
     public static Biome createKristallhain(Registerable<Biome> context) {
         SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
-        // Spawn settings für Kristall-Golems und Kristallspinnen
 
-        GenerationSettings.LookupBackedBuilder biomeBuilder =
-                new GenerationSettings.LookupBackedBuilder(context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
-                        context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x9966CC)
+                        .waterFogColor(0x6633AA)
+                        .skyColor(0xB19CD9)
+                        .grassColor(0x8A5FBF)
+                        .foliageColor(0x9A6FCF)
+                        .fogColor(0xD4C4F0),
+                0.4f,
+                0.0f);
+    }
+
+    public static Biome createSternenlichtwald(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x283F73)
+                        .waterFogColor(0x1A2745)
+                        .skyColor(0x1E0F3C)
+                        .grassColor(0x5B53A6)
+                        .foliageColor(0x9A9DCB)
+                        .fogColor(0x4B4B7A),
+                0.25f,
+                0.05f);
+    }
+
+    public static Biome createAzurklippenOase(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x28C4D9)
+                        .waterFogColor(0x1597B5)
+                        .skyColor(0x8DD3FF)
+                        .grassColor(0x4FE0C8)
+                        .foliageColor(0x3CB29D)
+                        .fogColor(0xB6F0F2),
+                0.5f,
+                0.4f);
+    }
+
+    public static Biome createPhoenixhain(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0xFF6A2F)
+                        .waterFogColor(0xBF3C1B)
+                        .skyColor(0xFFB367)
+                        .grassColor(0xFF9F45)
+                        .foliageColor(0xD96828)
+                        .fogColor(0xFFCF8A),
+                0.8f,
+                0.0f);
+    }
+
+    public static Biome createTraumseenEbenen(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0xAEEBFF)
+                        .waterFogColor(0x7FC8E8)
+                        .skyColor(0xD8F3FF)
+                        .grassColor(0x9DE6D5)
+                        .foliageColor(0xB9F0E9)
+                        .fogColor(0xE6F9FF),
+                0.45f,
+                0.3f);
+    }
+
+    public static Biome createBluetenpfeilerSporn(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0xF5A6C7)
+                        .waterFogColor(0xD97AA5)
+                        .skyColor(0xFFE0EC)
+                        .grassColor(0xC1F4C6)
+                        .foliageColor(0xFFB7DA)
+                        .fogColor(0xFFE6F2),
+                0.55f,
+                0.15f);
+    }
+
+    public static Biome createJadelabyrinth(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x1F5E47)
+                        .waterFogColor(0x153F31)
+                        .skyColor(0x7AAF79)
+                        .grassColor(0x3E9C4B)
+                        .foliageColor(0x59C060)
+                        .fogColor(0x94CDA3),
+                0.35f,
+                0.2f);
+    }
+
+    public static Biome createKristallhuegel(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x88D1FF)
+                        .waterFogColor(0x5AA6D6)
+                        .skyColor(0xF0E1FF)
+                        .grassColor(0x8AD0FF)
+                        .foliageColor(0xD6A7FF)
+                        .fogColor(0xF6E9FF),
+                0.4f,
+                0.1f);
+    }
+
+    public static Biome createNebeltal(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.UNDERGROUND_ORES,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY);
 
-        // Füge Glowing Moss als Surface Feature hinzu
-        biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
-            context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
-                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY));
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x849AA9)
+                        .waterFogColor(0x5E6C78)
+                        .skyColor(0x9FB4C3)
+                        .grassColor(0x92A499)
+                        .foliageColor(0xB0C3BD)
+                        .fogColor(0xD5DDE2),
+                0.2f,
+                0.3f);
+    }
+
+    public static Biome createSmaragdgrotte(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x1F9D5C)
+                        .waterFogColor(0x126C3F)
+                        .skyColor(0x78D8B6)
+                        .grassColor(0x3BCB6C)
+                        .foliageColor(0x56F78A)
+                        .fogColor(0x9FECC6),
+                0.35f,
+                0.25f);
+    }
+
+    public static Biome createAurorakuppel(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x52FFE5)
+                        .waterFogColor(0x1FC9C2)
+                        .skyColor(0xA8FFF6)
+                        .grassColor(0x68F1AA)
+                        .foliageColor(0x9AF5FF)
+                        .fogColor(0xCFFBFF),
+                0.3f,
+                0.1f);
+    }
+
+    public static Biome createAetherwald(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x8DE6F5)
+                        .waterFogColor(0x63BFD6)
+                        .skyColor(0xCFE8FF)
+                        .grassColor(0x7BE7DA)
+                        .foliageColor(0xADEEEA)
+                        .fogColor(0xDDF6FF),
+                0.25f,
+                0.05f);
+    }
+
+    public static Biome createPhantomArchipel(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
 
-        // Füge Ethereal Trees als Surface Feature hinzu
-        biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
-            context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
-                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY));
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x0B1028)
+                        .waterFogColor(0x050713)
+                        .skyColor(0x1C1A33)
+                        .grassColor(0x2B2E46)
+                        .foliageColor(0x3F445B)
+                        .fogColor(0x23243B),
+                0.1f,
+                0.0f);
+    }
+
+    public static Biome createSeelensumpf(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x1B2B2B)
+                        .waterFogColor(0x111A1E)
+                        .skyColor(0x2C1F3B)
+                        .grassColor(0x304036)
+                        .foliageColor(0x4F5F53)
+                        .fogColor(0x3A4546),
+                0.15f,
+                0.35f);
+    }
+
+    public static Biome createObsidianklamm(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.UNDERGROUND_ORES,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x2B1A1A)
+                        .waterFogColor(0x180C0C)
+                        .skyColor(0x3B2C2F)
+                        .grassColor(0x2F2E35)
+                        .foliageColor(0x4A3A40)
+                        .fogColor(0x21191C),
+                0.05f,
+                0.0f);
+    }
+
+    public static Biome createNachtfalltal(Registerable<Biome> context) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder biomeBuilder = createGenerationBuilder(context);
+
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.UNDERGROUND_ORES,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY);
+        addPlacedFeature(context, biomeBuilder,
+                net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
+                net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
+
+        return buildEndBiome(spawnBuilder, biomeBuilder,
+                new BiomeEffects.Builder()
+                        .waterColor(0x1A1E3C)
+                        .waterFogColor(0x0E1122)
+                        .skyColor(0x2B254D)
+                        .grassColor(0x1F2640)
+                        .foliageColor(0x39425F)
+                        .fogColor(0x25263A),
+                0.18f,
+                0.05f);
+    }
+
+    private static GenerationSettings.LookupBackedBuilder createGenerationBuilder(Registerable<Biome> context) {
+        return new GenerationSettings.LookupBackedBuilder(
+                context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
+                context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
+    }
+
+    private static void addPlacedFeature(Registerable<Biome> context,
+                                         GenerationSettings.LookupBackedBuilder builder,
+                                         net.minecraft.world.gen.GenerationStep.Feature featureStep,
+                                         RegistryKey<net.minecraft.world.gen.feature.PlacedFeature> placedFeatureKey) {
+        builder.feature(featureStep,
+                context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(placedFeatureKey));
+    }
 
+    private static Biome buildEndBiome(SpawnSettings.Builder spawnBuilder,
+                                       GenerationSettings.LookupBackedBuilder generationBuilder,
+                                       BiomeEffects.Builder effectsBuilder,
+                                       float temperature,
+                                       float downfall) {
+        effectsBuilder.moodSound(BiomeMoodSound.CAVE);
         return new Biome.Builder()
-                .precipitation(false) // Magische Atmosphäre ohne Regen
-                .downfall(0.0f) // Trocken, nur kristalline Atmosphäre
-                .temperature(0.4f) // Mild temperiert durch Kristallenergie
-                .generationSettings(biomeBuilder.build())
+                .precipitation(false)
+                .temperature(temperature)
+                .downfall(downfall)
+                .generationSettings(generationBuilder.build())
                 .spawnSettings(spawnBuilder.build())
-                .effects(new BiomeEffects.Builder()
-                        .waterColor(0x9966CC) // Violett-bläulich für kristallines Wasser
-                        .waterFogColor(0x6633AA) // Tiefer Violettton
-                        .skyColor(0xB19CD9) // Violett-blauer Himmel mit Lichtbrechung
-                        .grassColor(0x8A5FBF) // Dunkles Violett für Vegetation
-                        .foliageColor(0x9A6FCF) // Kristallines Violett für Blätter
-                        .fogColor(0xD4C4F0) // Heller violetter Nebel mit Prismeneffekt
-                        .moodSound(BiomeMoodSound.CAVE)
-                        .build())
+                .effects(effectsBuilder.build())
                 .build();
     }
 }
diff --git a/src/main/resources/assets/bioms-of-infinity/lang/de_de.json b/src/main/resources/assets/bioms-of-infinity/lang/de_de.json
index 247c8b3dd27955978f11b9617fb33e257992d4a4..d472680d0adec2f3c61fda2ca1f1cea78d017a6b 100644
--- a/src/main/resources/assets/bioms-of-infinity/lang/de_de.json
+++ b/src/main/resources/assets/bioms-of-infinity/lang/de_de.json
@@ -13,27 +13,42 @@
   "block.bioms-of-infinity.spore_moss": "Sporenmoos",
   "block.bioms-of-infinity.crystal_cluster": "Kristallcluster",
   "block.bioms-of-infinity.large_crystal_shard": "Große Kristallscherbe",
   "block.bioms-of-infinity.prismatic_crystal_ore": "Prismatisches Kristall-Erz",
 
   "item.bioms-of-infinity.mist_glimmer": "Nebelglimmer",
   "item.bioms-of-infinity.mist_crystal": "Nebelkristall",
   "item.bioms-of-infinity.ghost_essence": "Geisteressenz",
   "item.bioms-of-infinity.prismatic_crystal": "Prismatischer Kristall",
   "item.bioms-of-infinity.crystal_shard": "Kristallscherbe",
   "item.bioms-of-infinity.chromatic_dust": "Chromatischer Staub",
   "item.bioms-of-infinity.crystal_sword": "Kristallschwert",
   "item.bioms-of-infinity.mist_pickaxe": "Nebelspitzhacke",
 
   "item.bioms-of-infinity.mist_crystal.tooltip": "Ein mystischer Kristall aus den Nebelwipfeln",
   "item.bioms-of-infinity.mist_crystal.tooltip2": "Erscheint nur bei Tagesanbruch in Steinadern",
   "item.bioms-of-infinity.prismatic_crystal.tooltip": "Ein schimmernder Kristall voller magischer Energie",
   "item.bioms-of-infinity.prismatic_crystal.tooltip2": "Bricht Licht in wunderschöne Spektren",
 
   "entity.bioms-of-infinity.mist_spirit": "Nebelgeist",
   "entity.bioms-of-infinity.mist_wolf": "Nebelwolf",
   "entity.bioms-of-infinity.crystal_golem": "Kristallgolem",
   "entity.bioms-of-infinity.crystal_spider": "Kristallspinne",
 
   "biome.bioms-of-infinity.mist_peaks": "Nebelwipfel",
-  "biome.bioms-of-infinity.crystal_grove": "Kristallhain"
+  "biome.bioms-of-infinity.crystal_grove": "Kristallhain",
+  "biome.bioms-of-infinity.sternenlichtwald": "Sternenlichtwald",
+  "biome.bioms-of-infinity.azurklippen_oase": "Azurklippen-Oase",
+  "biome.bioms-of-infinity.phoenixhain": "Phönixhain",
+  "biome.bioms-of-infinity.traumseen_ebenen": "Träumseen-Ebenen",
+  "biome.bioms-of-infinity.bluetenpfeiler_sporn": "Blütenpfeiler-Sporn",
+  "biome.bioms-of-infinity.jadelabyrinth": "Jadelabyrinth",
+  "biome.bioms-of-infinity.kristallhuegel": "Kristallhügel",
+  "biome.bioms-of-infinity.nebeltal": "Nebeltal",
+  "biome.bioms-of-infinity.smaragdgrotte": "Smaragdgrotte",
+  "biome.bioms-of-infinity.aurorakuppel": "Aurorakuppel",
+  "biome.bioms-of-infinity.aetherwald": "Ätherwald",
+  "biome.bioms-of-infinity.phantom_archipel": "Phantom-Archipel",
+  "biome.bioms-of-infinity.seelensumpf": "Seelensumpf",
+  "biome.bioms-of-infinity.obsidianklamm": "Obsidianklamm",
+  "biome.bioms-of-infinity.nachtfalltal": "Nachtfalltal"
 }
diff --git a/src/main/resources/assets/bioms-of-infinity/lang/en_us.json b/src/main/resources/assets/bioms-of-infinity/lang/en_us.json
index 741dd9ab4f59d1fff605f1736a81af732f32e3d5..e89777e039f45e9d14ecf4648af316641346b1b1 100644
--- a/src/main/resources/assets/bioms-of-infinity/lang/en_us.json
+++ b/src/main/resources/assets/bioms-of-infinity/lang/en_us.json
@@ -13,27 +13,42 @@
   "block.bioms-of-infinity.spore_moss": "Spore Moss",
   "block.bioms-of-infinity.crystal_cluster": "Crystal Cluster",
   "block.bioms-of-infinity.large_crystal_shard": "Large Crystal Shard",
   "block.bioms-of-infinity.prismatic_crystal_ore": "Prismatic Crystal Ore",
 
   "item.bioms-of-infinity.mist_glimmer": "Mist Glimmer",
   "item.bioms-of-infinity.mist_crystal": "Mist Crystal",
   "item.bioms-of-infinity.ghost_essence": "Ghost Essence",
   "item.bioms-of-infinity.prismatic_crystal": "Prismatic Crystal",
   "item.bioms-of-infinity.crystal_shard": "Crystal Shard",
   "item.bioms-of-infinity.chromatic_dust": "Chromatic Dust",
   "item.bioms-of-infinity.crystal_sword": "Crystal Sword",
   "item.bioms-of-infinity.mist_pickaxe": "Mist Pickaxe",
 
   "item.bioms-of-infinity.mist_crystal.tooltip": "A mystical crystal from the Mist Peaks",
   "item.bioms-of-infinity.mist_crystal.tooltip2": "Appears only at dawn in stone veins",
   "item.bioms-of-infinity.prismatic_crystal.tooltip": "A shimmering crystal full of magical energy",
   "item.bioms-of-infinity.prismatic_crystal.tooltip2": "Refracts light into beautiful spectrums",
 
   "entity.bioms-of-infinity.mist_spirit": "Mist Spirit",
   "entity.bioms-of-infinity.mist_wolf": "Mist Wolf",
   "entity.bioms-of-infinity.crystal_golem": "Crystal Golem",
   "entity.bioms-of-infinity.crystal_spider": "Crystal Spider",
 
   "biome.bioms-of-infinity.mist_peaks": "Mist Peaks",
-  "biome.bioms-of-infinity.crystal_grove": "Crystal Grove"
+  "biome.bioms-of-infinity.crystal_grove": "Crystal Grove",
+  "biome.bioms-of-infinity.sternenlichtwald": "Starlight Forest",
+  "biome.bioms-of-infinity.azurklippen_oase": "Azure Cliff Oasis",
+  "biome.bioms-of-infinity.phoenixhain": "Phoenix Grove",
+  "biome.bioms-of-infinity.traumseen_ebenen": "Dreamlake Flats",
+  "biome.bioms-of-infinity.bluetenpfeiler_sporn": "Blossom Spire Spur",
+  "biome.bioms-of-infinity.jadelabyrinth": "Jade Labyrinth",
+  "biome.bioms-of-infinity.kristallhuegel": "Crystal Hills",
+  "biome.bioms-of-infinity.nebeltal": "Misty Vale",
+  "biome.bioms-of-infinity.smaragdgrotte": "Emerald Grotto",
+  "biome.bioms-of-infinity.aurorakuppel": "Aurora Dome",
+  "biome.bioms-of-infinity.aetherwald": "Aetherwood",
+  "biome.bioms-of-infinity.phantom_archipel": "Phantom Archipelago",
+  "biome.bioms-of-infinity.seelensumpf": "Soulmarsh",
+  "biome.bioms-of-infinity.obsidianklamm": "Obsidian Chasm",
+  "biome.bioms-of-infinity.nachtfalltal": "Nightfall Vale"
 }
diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/ethereal_log.png b/src/main/resources/assets/bioms-of-infinity/textures/block/ethereal_log.png
new file mode 100644
index 0000000000000000000000000000000000000000..c49d4a5616b27345b53d77b62d7f31d0fc11335b
GIT binary patch
literal 137
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`0iG_7Ar*6ybGmMQn$O62;^axi
zV#&Ta)=h`{xi}mi8XE?1u-#)23;J90<b>s`T?r3(6BMtWf01bRA#TA9hGVst=Pi7~
k>Qv{(zq#={(@~(oKX|2P$Iay_0h-O=>FVdQ&MBb@0E<O1cK`qY

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/ethereal_log_top.png b/src/main/resources/assets/bioms-of-infinity/textures/block/ethereal_log_top.png
new file mode 100644
index 0000000000000000000000000000000000000000..a05d4d6ffd1c35ee1e73d6f7811dff0d3beadc94
GIT binary patch
literal 137
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`0iG_7Ar*6y=S(YqWX~)#VT!Qh
zGov}XYnWT#zs>DCl%BLefM*Y*&XQk0?@Zi%rS#wd=>txy=3hLV^I)&TM#diXu)S_4
mxm*79$fYsAXYJx;V7RtSn(xcc+Ic{;89ZJ6T-G@yGywn+G&55G

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/glowing_moss_block.png b/src/main/resources/assets/bioms-of-infinity/textures/block/glowing_moss_block.png
new file mode 100644
index 0000000000000000000000000000000000000000..016e86687df4861a486d3c9d352e684fd59d625e
GIT binary patch
literal 136
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`{+=$5Ar*6ypIj99b-sb+hRcl!
zJ9%Q1WHf62e?6#CqsGQ{@PPCIr&aUCv(7DF$IW(+K`iKRk6aq_d)6-Agfsu*dnSo<
j{FJmk!*-8bM4Ex2gNL`vaIeV^pwSGTu6{1-oD!M<6bvmv

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/mist_granite.png b/src/main/resources/assets/bioms-of-infinity/textures/block/mist_granite.png
new file mode 100644
index 0000000000000000000000000000000000000000..c7848ab8a7284050fa78f1c48a5510541435faae
GIT binary patch
literal 137
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`0iG_7Ar*6ybLMY)WzQ^B@$a3q
z(e#IBXPayMVaPWZu@h!)O?beYpm_CsdH($c>$utOF^C2I?U74ke$U#)n-H`0vyfMu
k!jtqb2GSM!0XYl|mK)VpHRi8O0h-O=>FVdQ&MBb@0PNl^EC2ui

literal 0
HcmV?d00001

