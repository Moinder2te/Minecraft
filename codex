diff --git a/README.md b/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..86f3505ed51a5c45156754c90974c7d4cd08276c
--- /dev/null
+++ b/README.md
@@ -0,0 +1,40 @@
+# Bioms of Infinity – Developer Notes
+
+This fork extends the existing Bioms of Infinity prototype with the first wave of the End overhaul. The focus of this drop is on
+infrastructure: configuration, boss framework, the first trio of production-ready biomes, and a minimal advancement path. The
+content shipped here is intentionally progression-safe and keeps all legacy registry identifiers intact for world
+compatibility.
+
+## Configuration
+A JSON5-compatible configuration file is created on first launch at `config/biomsofinfinity.json5`. The important sections are:
+
+- `worldgen.enableAllBiomes` – master toggle for custom End biomes. Individual biome weights live in
+  `worldgen.biomeWeights` and can be tuned per biome id (e.g. `glowshroom_forest`).
+- `worldgen.structureWeights` – spawn weight hints for future structures. They currently gate altar frequency.
+- `bosses.*` – controls all boss behaviour. By default `allowBossSpawns` is `true`, `naturalBossSpawns` stays `false`, and
+  `altarSpawnsOnly` is `true`. The Shadow King obeys global and per-boss cooldowns specified in in-game days.
+- `gameplay.aetherSlowFallingInBiome` and `gameplay.stormProjectileShieldTicks` reserve hooks for future biome mechanics.
+- `debug` flags support verbose logging and datagen forcing when needed.
+
+The `/boi` command family (permission level ≥2) mirrors the config at runtime:
+
+- `/boi boss enable|disable` toggles altar activation without touching the file on disk.
+- `/boi boss resetcooldowns` clears the persistent cooldown tracker for all bosses.
+- `/boi config reload` reloads the JSON5 file after manual edits.
+
+## Content Delivered in this Iteration
+- **Biomes:** Glowshroom Forest, Shadow Isles, and Light Crypt. Each biome introduces bespoke flora, ambience, and worldgen.
+- **Blocks & Items:** New luminous materials, altar components, and utility items such as the Dark Veil and Aurora Flare.
+- **Boss Framework:** Base classes, persistent cooldown tracking, and the Shadow King encounter tied to the Shadow Altar.
+- **Advancements:** A short path that encourages altar crafting and boss completion.
+- **Datagen Scaffolding:** Providers for block models, loot tables, recipes, and advancements are wired into the Fabric
+  datagen entrypoint. Running `./gradlew runDatagen` (with network access) will regenerate the JSON assets shipped here.
+
+## Adding New Biomes or Bosses
+1. Add biome builders under `net.liam.biomsofinfinity.content.biome` and register the `RegistryKey` in `ModBiomes`.
+2. Create placed and configured features in `world.feature` and wire them through `ModWorldGeneration`.
+3. Supply placeholder textures and language entries for every new block, item, and entity.
+4. Bosses should extend `BaseBossEntity`, declare a unique `BOSS_ID`, and trigger cooldowns through `BossCooldownState`.
+5. Gate encounters behind an altar or ritual block—never natural spawns.
+
+Remember to update `BOIConfig` defaults and `README.md` when new configurable behaviour ships.
diff --git a/gradle.properties b/gradle.properties
index 135bb73791c5946b6e85d6e70324325ed2f3ec56..3d2b6516093ed8a54e1076515b6c1ff7064daa26 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,21 +1,21 @@
 # Done to increase the memory available to gradle.
 org.gradle.jvmargs=-Xmx1G
 org.gradle.parallel=true
 
 # IntelliJ IDEA is not yet fully compatible with configuration cache, see: https://github.com/FabricMC/fabric-loom/issues/1349
 org.gradle.configuration-cache=false
 
 # Fabric Properties
 # check these on https://fabricmc.net/develop
 minecraft_version=1.21.8
 yarn_mappings=1.21.8+build.1
 loader_version=0.17.2
-loom_version=1.11-SNAPSHOT
+loom_version=1.7-SNAPSHOT
 
 # Mod Properties
 mod_version=1.0.0
 maven_group=net.liam.biomsofinfinity
 archives_base_name=bioms-of-infinity
 
 # Dependencies
-fabric_version=0.134.0+1.21.8
\ No newline at end of file
+fabric_version=0.134.0+1.21.8
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 2e1113280ef142e60ad69ba98918fc408d759137..df97d72b8b91fa0e088ae27b1c84a6063481fe22 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,7 +1,7 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-9.1.0-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java b/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java
index 220baae7455924d4d781ee0f4af0bd608b7be52f..85b3a9895bb872c7cf9759e93632971387599fcf 100644
--- a/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java
+++ b/src/main/java/net/liam/biomsofinfinity/Biomsofinfinity.java
@@ -1,55 +1,59 @@
 package net.liam.biomsofinfinity;
 
 import net.fabricmc.api.ModInitializer;
 import net.fabricmc.fabric.api.event.registry.DynamicRegistrySetupCallback;
 import net.liam.biomsofinfinity.block.ModBlocks;
+import net.liam.biomsofinfinity.command.BOICommand;
+import net.liam.biomsofinfinity.config.BOIConfig;
 import net.liam.biomsofinfinity.entity.ModEntities;
 import net.liam.biomsofinfinity.item.ModItems;
 import net.liam.biomsofinfinity.world.ModWorldGeneration;
 import net.minecraft.registry.RegistryKeys;
 import net.liam.biomsofinfinity.world.feature.ModConfiguredFeatures;
 import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
 import net.liam.biomsofinfinity.world.biome.ModBiomes;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public class Biomsofinfinity implements ModInitializer {
 	public static final String MOD_ID = "bioms-of-infinity";
 
 	// This logger is used to write text to the console and the log file.
 	// It is considered best practice to use your mod id as the logger's name.
 	// That way, it's clear which mod wrote info, warnings, and errors.
 	public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);
 
 	@Override
 	public void onInitialize() {
 		// This code runs as soon as Minecraft is in a mod-load-ready state.
 		// However, some things (like resources) may still be uninitialized.
 		// Proceed with mild caution.
 
-		LOGGER.info("Initializing Bioms of Infinity - Adding mystical dimensions to Minecraft!");
+                BOIConfig.load();
+                LOGGER.info("Initializing Bioms of Infinity - Adding mystical dimensions to Minecraft!");
 
-		// Register all mod content
-		ModBlocks.registerModBlocks();
-		ModItems.registerModItems();
-		ModEntities.registerModEntities();
+                // Register all mod content
+                ModBlocks.registerModBlocks();
+                ModItems.registerModItems();
+                ModEntities.registerModEntities();
+                BOICommand.register();
 
 		// --- Dynamic Registry Setup für Worldgen (1.21.x) ---
 		DynamicRegistrySetupCallback.EVENT.register(registryManager -> {
 			// Diese wird automatisch von Fabric aufgerufen wenn die Dynamic Registries geladen werden
 			LOGGER.info("Setting up dynamic registries for worldgen features");
 
 			// Die Biome werden über die ModBiomes-Klasse registriert (diese wird von Fabric automatisch aufgerufen)
 			// Features sind bereits über JSON-Dateien definiert
 		});
 		// --- Ende: Dynamic Registry Setup ---
 
 		ModWorldGeneration.generateModWorldGen();
 
 		// End-Biome Integration nach der Weltgenerierung
 		net.liam.biomsofinfinity.world.biome.EndBiomeIntegration.registerEndBiomes();
 
 		LOGGER.info("Bioms of Infinity loaded successfully! Mist Peaks and Crystal Grove await...");
 	}
 }
\ No newline at end of file
diff --git a/src/main/java/net/liam/biomsofinfinity/block/GlowshroomPlantBlock.java b/src/main/java/net/liam/biomsofinfinity/block/GlowshroomPlantBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..90ec926a62612ceee91ad930be5a94a9874e75ff
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/block/GlowshroomPlantBlock.java
@@ -0,0 +1,20 @@
+package net.liam.biomsofinfinity.block;
+
+import net.minecraft.block.BlockState;
+import net.minecraft.block.PlantBlock;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.WorldView;
+
+/**
+ * Simple glowing plant that can only be placed on End stone variants.
+ */
+public class GlowshroomPlantBlock extends PlantBlock {
+    public GlowshroomPlantBlock(Settings settings) {
+        super(settings);
+    }
+
+    @Override
+    protected boolean canPlantOnTop(BlockState floor, WorldView world, BlockPos pos) {
+        return floor.isOf(net.minecraft.block.Blocks.END_STONE) || floor.isOf(ModBlocks.GLOWING_MOSS_BLOCK);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/block/ModBlocks.java b/src/main/java/net/liam/biomsofinfinity/block/ModBlocks.java
index 4e0e47e3ca2b85c4a6134c823915e3d39a0658df..b0fd4dc76ecbe383e5f078a39aa3ee620190909e 100644
--- a/src/main/java/net/liam/biomsofinfinity/block/ModBlocks.java
+++ b/src/main/java/net/liam/biomsofinfinity/block/ModBlocks.java
@@ -1,71 +1,150 @@
 package net.liam.biomsofinfinity.block;
 
 import net.fabricmc.fabric.api.itemgroup.v1.ItemGroupEvents;
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.minecraft.block.*;
+import net.minecraft.sound.BlockSoundGroup;
 import net.minecraft.item.BlockItem;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemGroups;
 import net.minecraft.registry.Registries;
 import net.minecraft.registry.Registry;
 import net.minecraft.registry.RegistryKey;
 import net.minecraft.registry.RegistryKeys;
 import net.minecraft.util.Identifier;
 
 public class ModBlocks {
 
     // Helper methods for cleaner registration
     private static RegistryKey<Item> key(String name) {
         return RegistryKey.of(RegistryKeys.ITEM, Identifier.of(Biomsofinfinity.MOD_ID, name));
     }
 
     private static RegistryKey<Block> blockKey(String name) {
         return RegistryKey.of(RegistryKeys.BLOCK, Identifier.of(Biomsofinfinity.MOD_ID, name));
     }
 
     private static Item registerItem(String name, Item item) {
         return Registry.register(Registries.ITEM, Identifier.of(Biomsofinfinity.MOD_ID, name), item);
     }
 
     private static Block registerBlock(String name, Block block) {
         return Registry.register(Registries.BLOCK, Identifier.of(Biomsofinfinity.MOD_ID, name), block);
     }
 
     // Statische finale Blöcke mit korrekter 1.21.8 Registrierung
     public static final Block MIST_GRANITE = registerBlock("mist_granite",
             new Block(AbstractBlock.Settings.create()
                     .strength(1.5f)
                     .registryKey(blockKey("mist_granite"))));
 
     public static final Block GLOWING_MOSS_BLOCK = registerBlock("glowing_moss_block",
             new Block(AbstractBlock.Settings.create()
                     .strength(0.1f)
                     .luminance(state -> 7)
                     .registryKey(blockKey("glowing_moss_block"))));
 
     public static final Block ETHEREAL_LOG = registerBlock("ethereal_log",
             new PillarBlock(AbstractBlock.Settings.create()
                     .strength(2.0f)
                     .registryKey(blockKey("ethereal_log"))));
 
+    // Glowshroom Forest
+    public static final Block GLOWSHROOM_PLANT = registerBlock("glowshroom_plant",
+            new GlowshroomPlantBlock(AbstractBlock.Settings.copy(Blocks.CRIMSON_FUNGUS)
+                    .luminance(state -> 12)
+                    .noCollision()
+                    .ticksRandomly()
+                    .registryKey(blockKey("glowshroom_plant"))));
+
+    public static final Block LUMINOUS_FIBER_BLOCK = registerBlock("luminous_fiber_block",
+            new Block(AbstractBlock.Settings.create()
+                    .luminance(state -> 14)
+                    .strength(1.0f)
+                    .registryKey(blockKey("luminous_fiber_block"))));
+
+    // Shadow Isles
+    public static final Block SHADOW_SLATE = registerBlock("shadow_slate",
+            new Block(AbstractBlock.Settings.create()
+                    .strength(3.0f, 10.0f)
+                    .sounds(BlockSoundGroup.DEEPSLATE)
+                    .registryKey(blockKey("shadow_slate"))));
+
+    public static final Block SHADOW_ALTAR = registerBlock("shadow_altar",
+            new ShadowAltarBlock(AbstractBlock.Settings.create()
+                    .strength(4.0f, 20.0f)
+                    .luminance(state -> 5)
+                    .requiresTool()
+                    .registryKey(blockKey("shadow_altar"))));
+
+    public static final Block OBSIDIAN_BRAMBLE = registerBlock("obsidian_bramble",
+            new ShadowBrambleBlock(AbstractBlock.Settings.copy(Blocks.WITHER_ROSE)
+                    .luminance(state -> 3)
+                    .registryKey(blockKey("obsidian_bramble"))));
+
+    // Light Crypt
+    public static final Block AURORA_GLASS = registerBlock("aurora_glass",
+            new GlassBlock(AbstractBlock.Settings.copy(Blocks.AMETHYST_BLOCK)
+                    .luminance(state -> 10)
+                    .registryKey(blockKey("aurora_glass"))));
+
+    public static final Block RADIANT_PYLON = registerBlock("radiant_pylon",
+            new PillarBlock(AbstractBlock.Settings.copy(Blocks.QUARTZ_PILLAR)
+                    .luminance(state -> 15)
+                    .registryKey(blockKey("radiant_pylon"))));
+
     // Block Items mit korrekter 1.21.8 Registrierung
     public static final Item MIST_GRANITE_ITEM = registerItem("mist_granite",
             new BlockItem(MIST_GRANITE, new Item.Settings().registryKey(key("mist_granite"))));
 
     public static final Item GLOWING_MOSS_BLOCK_ITEM = registerItem("glowing_moss_block",
             new BlockItem(GLOWING_MOSS_BLOCK, new Item.Settings().registryKey(key("glowing_moss_block"))));
 
     public static final Item ETHEREAL_LOG_ITEM = registerItem("ethereal_log",
             new BlockItem(ETHEREAL_LOG, new Item.Settings().registryKey(key("ethereal_log"))));
 
+    public static final Item GLOWSHROOM_PLANT_ITEM = registerItem("glowshroom_plant",
+            new BlockItem(GLOWSHROOM_PLANT, new Item.Settings().registryKey(key("glowshroom_plant"))));
+
+    public static final Item LUMINOUS_FIBER_BLOCK_ITEM = registerItem("luminous_fiber_block",
+            new BlockItem(LUMINOUS_FIBER_BLOCK, new Item.Settings().registryKey(key("luminous_fiber_block"))));
+
+    public static final Item SHADOW_SLATE_ITEM = registerItem("shadow_slate",
+            new BlockItem(SHADOW_SLATE, new Item.Settings().registryKey(key("shadow_slate"))));
+
+    public static final Item SHADOW_ALTAR_ITEM = registerItem("shadow_altar",
+            new BlockItem(SHADOW_ALTAR, new Item.Settings().registryKey(key("shadow_altar"))));
+
+    public static final Item OBSIDIAN_BRAMBLE_ITEM = registerItem("obsidian_bramble",
+            new BlockItem(OBSIDIAN_BRAMBLE, new Item.Settings().registryKey(key("obsidian_bramble"))));
+
+    public static final Item AURORA_GLASS_ITEM = registerItem("aurora_glass",
+            new BlockItem(AURORA_GLASS, new Item.Settings().registryKey(key("aurora_glass"))));
+
+    public static final Item RADIANT_PYLON_ITEM = registerItem("radiant_pylon",
+            new BlockItem(RADIANT_PYLON, new Item.Settings().registryKey(key("radiant_pylon"))));
+
     public static void registerModBlocks() {
         Biomsofinfinity.LOGGER.info("Registering ModBlocks for " + Biomsofinfinity.MOD_ID);
 
         // ItemGroup-Registrierung
         ItemGroupEvents.modifyEntriesEvent(ItemGroups.BUILDING_BLOCKS).register(entries -> {
             entries.add(MIST_GRANITE);
             entries.add(GLOWING_MOSS_BLOCK);
             entries.add(ETHEREAL_LOG);
+            entries.add(LUMINOUS_FIBER_BLOCK);
+            entries.add(SHADOW_SLATE);
+            entries.add(AURORA_GLASS);
+            entries.add(RADIANT_PYLON);
+        });
+
+        ItemGroupEvents.modifyEntriesEvent(ItemGroups.NATURAL).register(entries -> {
+            entries.add(GLOWSHROOM_PLANT);
+            entries.add(OBSIDIAN_BRAMBLE);
+        });
+
+        ItemGroupEvents.modifyEntriesEvent(ItemGroups.FUNCTIONAL).register(entries -> {
+            entries.add(SHADOW_ALTAR);
         });
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/block/ShadowAltarBlock.java b/src/main/java/net/liam/biomsofinfinity/block/ShadowAltarBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..8af9d6158000566f252b4408d93d8b4bd33b6831
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/block/ShadowAltarBlock.java
@@ -0,0 +1,86 @@
+package net.liam.biomsofinfinity.block;
+
+import net.liam.biomsofinfinity.config.BOIConfig;
+import net.liam.biomsofinfinity.content.boss.ShadowKingEntity;
+import net.liam.biomsofinfinity.entity.ModEntities;
+import net.liam.biomsofinfinity.item.ModItems;
+import net.liam.biomsofinfinity.world.boss.BossCooldownState;
+import net.liam.biomsofinfinity.world.biome.ModBiomes;
+import net.minecraft.block.Block;
+import net.minecraft.block.BlockState;
+import net.minecraft.entity.SpawnReason;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.server.world.ServerWorld;
+import net.minecraft.sound.SoundCategory;
+import net.minecraft.sound.SoundEvents;
+import net.minecraft.util.ActionResult;
+import net.minecraft.util.Hand;
+import net.minecraft.util.hit.BlockHitResult;
+import net.minecraft.world.World;
+
+/**
+ * Ritual altar that summons the Shadow King when activated with a {@link ModItems#SHADOW_HEART}.
+ */
+public class ShadowAltarBlock extends Block {
+    public ShadowAltarBlock(Settings settings) {
+        super(settings);
+    }
+
+    @Override
+    public ActionResult onUse(BlockState state, World world, net.minecraft.util.math.BlockPos pos, PlayerEntity player,
+                              Hand hand, BlockHitResult hit) {
+        if (world.isClient) {
+            return ActionResult.SUCCESS;
+        }
+
+        if (!(world instanceof ServerWorld serverWorld)) {
+            return ActionResult.FAIL;
+        }
+
+        var stack = player.getStackInHand(hand);
+        if (!stack.isOf(ModItems.SHADOW_HEART)) {
+            return ActionResult.PASS;
+        }
+
+        if (!BOIConfig.get().bosses.allowBossSpawns || !BOIConfig.get().bosses.altarSpawnsOnly) {
+            player.sendMessage(net.minecraft.text.Text.translatable("message.boi.boss.disabled"), true);
+            return ActionResult.SUCCESS;
+        }
+
+        BossCooldownState stateManager = BossCooldownState.get(serverWorld.getServer());
+        if (!stateManager.areBossesEnabled()) {
+            player.sendMessage(net.minecraft.text.Text.translatable("message.boi.boss.disabled"), true);
+            return ActionResult.SUCCESS;
+        }
+
+        if (!stateManager.canSummon(ShadowKingEntity.BOSS_ID, serverWorld.getTimeOfDay())) {
+            player.sendMessage(net.minecraft.text.Text.translatable("message.boi.boss.cooldown"), true);
+            return ActionResult.SUCCESS;
+        }
+
+        if (!serverWorld.getBiome(pos).matchesKey(ModBiomes.SHADOW_ISLES)) {
+            player.sendMessage(net.minecraft.text.Text.translatable("message.boi.boss.wrong_biome"), true);
+            return ActionResult.SUCCESS;
+        }
+
+        long existing = serverWorld.getEntitiesByType(ModEntities.SHADOW_KING, boss -> true).size();
+        if (existing >= BOIConfig.get().bosses.maxConcurrentBosses) {
+            player.sendMessage(net.minecraft.text.Text.translatable("message.boi.boss.too_many"), true);
+            return ActionResult.SUCCESS;
+        }
+
+        ShadowKingEntity boss = ModEntities.SHADOW_KING.create(serverWorld, null, player,
+                pos.up(2), SpawnReason.EVENT, true, false);
+        if (boss != null) {
+            boss.playBossMusic();
+            serverWorld.spawnEntity(boss);
+            stateManager.triggerCooldown(ShadowKingEntity.BOSS_ID, serverWorld.getTimeOfDay(), 24000L);
+            if (!player.isCreative()) {
+                stack.decrement(1);
+            }
+            serverWorld.playSound(null, pos, SoundEvents.BLOCK_ENCHANTMENT_TABLE_USE, SoundCategory.BLOCKS, 1.0F, 0.6F);
+            player.sendMessage(net.minecraft.text.Text.translatable("message.boi.boss.shadow_king.summoned"), true);
+        }
+        return ActionResult.SUCCESS;
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/block/ShadowBrambleBlock.java b/src/main/java/net/liam/biomsofinfinity/block/ShadowBrambleBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..ec21bb1969eb1d9e380c1c6c461a854e54ec052c
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/block/ShadowBrambleBlock.java
@@ -0,0 +1,17 @@
+package net.liam.biomsofinfinity.block;
+
+import net.minecraft.block.BlockState;
+import net.minecraft.block.PlantBlock;
+import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.WorldView;
+
+public class ShadowBrambleBlock extends PlantBlock {
+    public ShadowBrambleBlock(Settings settings) {
+        super(settings);
+    }
+
+    @Override
+    protected boolean canPlantOnTop(BlockState floor, WorldView world, BlockPos pos) {
+        return floor.isOf(net.minecraft.block.Blocks.END_STONE) || floor.isOf(ModBlocks.SHADOW_SLATE);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/command/BOICommand.java b/src/main/java/net/liam/biomsofinfinity/command/BOICommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ba311d2e166cf3216e57175f3848906317d27fd2
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/command/BOICommand.java
@@ -0,0 +1,77 @@
+package net.liam.biomsofinfinity.command;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.builder.ArgumentBuilder;
+import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;
+import net.liam.biomsofinfinity.Biomsofinfinity;
+import net.liam.biomsofinfinity.config.BOIConfig;
+import net.liam.biomsofinfinity.world.boss.BossCooldownState;
+import net.minecraft.command.CommandRegistryAccess;
+import net.minecraft.server.command.CommandManager;
+import net.minecraft.server.command.ServerCommandSource;
+import net.minecraft.text.Text;
+
+/**
+ * Registers the {@code /boi} command tree which bundles quality-of-life utilities such as reloading the configuration
+ * file or toggling boss encounters. The command requires permission level 2 and therefore targets server operators.
+ */
+public final class BOICommand {
+    private BOICommand() {
+    }
+
+    public static void register() {
+        CommandRegistrationCallback.EVENT.register(BOICommand::register);
+    }
+
+    private static void register(CommandDispatcher<ServerCommandSource> dispatcher, CommandRegistryAccess access,
+                                 CommandManager.RegistrationEnvironment environment) {
+        LiteralArgumentBuilder<ServerCommandSource> root = CommandManager.literal("boi")
+                .requires(source -> source.hasPermissionLevel(2))
+                .then(buildBossNode())
+                .then(buildConfigNode());
+
+        dispatcher.register(root);
+    }
+
+    private static ArgumentBuilder<ServerCommandSource, ?> buildBossNode() {
+        return CommandManager.literal("boss")
+                .then(CommandManager.literal("enable")
+                        .executes(context -> setBossEnabled(context, true)))
+                .then(CommandManager.literal("disable")
+                        .executes(context -> setBossEnabled(context, false)))
+                .then(CommandManager.literal("resetcooldowns")
+                        .executes(BOICommand::resetCooldowns));
+    }
+
+    private static ArgumentBuilder<ServerCommandSource, ?> buildConfigNode() {
+        return CommandManager.literal("config")
+                .then(CommandManager.literal("reload")
+                        .executes(BOICommand::reloadConfig));
+    }
+
+    private static int setBossEnabled(CommandContext<ServerCommandSource> context, boolean enabled) {
+        BossCooldownState state = BossCooldownState.get(context.getSource().getServer());
+        state.setBossesEnabled(enabled);
+        context.getSource().sendFeedback(() -> Text.translatable(enabled ?
+                "commands.boi.boss.enabled" : "commands.boi.boss.disabled"), true);
+        if (!enabled && BOIConfig.get().bosses.announceBossEvents) {
+            Biomsofinfinity.LOGGER.warn("Boss encounters have been disabled via command. No new bosses can be summoned until re-enabled.");
+        }
+        return 1;
+    }
+
+    private static int resetCooldowns(CommandContext<ServerCommandSource> context) {
+        BossCooldownState state = BossCooldownState.get(context.getSource().getServer());
+        state.resetAll();
+        context.getSource().sendFeedback(() -> Text.translatable("commands.boi.boss.reset"), true);
+        return 1;
+    }
+
+    private static int reloadConfig(CommandContext<ServerCommandSource> context) {
+        BOIConfig.reload();
+        context.getSource().sendFeedback(() -> Text.translatable("commands.boi.config.reload"), true);
+        return 1;
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/config/BOIConfig.java b/src/main/java/net/liam/biomsofinfinity/config/BOIConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..69bee25f0efe17a8a0363ca377425d6d2993993a
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/config/BOIConfig.java
@@ -0,0 +1,357 @@
+package net.liam.biomsofinfinity.config;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.stream.JsonReader;
+import net.fabricmc.loader.api.FabricLoader;
+import net.liam.biomsofinfinity.Biomsofinfinity;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.time.Instant;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * Central configuration holder for Bioms of Infinity.
+ * <p>
+ * The configuration is stored in {@code config/biomsofinfinity.json5} inside the Fabric config directory and is loaded
+ * once during mod initialization. The file is written with sensible defaults when it does not exist. The loader is
+ * lenient and therefore accepts JSON5 style comments and trailing commas.
+ * </p>
+ */
+public final class BOIConfig {
+    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
+    private static final String FILE_NAME = "biomsofinfinity.json5";
+
+    private static ConfigData cached = null;
+
+    private BOIConfig() {
+    }
+
+    public static synchronized void load() {
+        cached = readOrCreate();
+        Biomsofinfinity.LOGGER.info("[BOI] Config loaded at {}", Instant.now());
+        if (cached.debug.logAllRegistrations) {
+            Biomsofinfinity.LOGGER.info("[BOI] Debug logging for registrations is enabled. Expect verbose output.");
+        }
+    }
+
+    public static synchronized ConfigData get() {
+        if (cached == null) {
+            load();
+        }
+        return cached;
+    }
+
+    public static synchronized void reload() {
+        load();
+    }
+
+    private static ConfigData readOrCreate() {
+        Path configDir = FabricLoader.getInstance().getConfigDir();
+        Path configPath = configDir.resolve(FILE_NAME);
+
+        if (Files.notExists(configPath)) {
+            try {
+                Files.createDirectories(configPath.getParent());
+                try (Writer writer = Files.newBufferedWriter(configPath, StandardCharsets.UTF_8)) {
+                    writer.write(defaultJson());
+                }
+            } catch (IOException exception) {
+                Biomsofinfinity.LOGGER.error("Failed to create default configuration", exception);
+            }
+        }
+
+        try (Reader reader = Files.newBufferedReader(configPath, StandardCharsets.UTF_8)) {
+            JsonReader jsonReader = new JsonReader(reader);
+            jsonReader.setLenient(true);
+            JsonElement element = JsonParser.parseReader(jsonReader);
+            if (element == null || !element.isJsonObject()) {
+                throw new IllegalStateException("Invalid configuration root. Expected JSON object.");
+            }
+            JsonObject root = element.getAsJsonObject();
+            return ConfigData.fromJson(root);
+        } catch (IOException | IllegalStateException exception) {
+            Biomsofinfinity.LOGGER.error("Failed to load configuration. Falling back to defaults.", exception);
+            return ConfigData.defaulted();
+        }
+    }
+
+    private static String defaultJson() {
+        return GSON.toJson(ConfigData.defaulted().toJson());
+    }
+
+    public static final class ConfigData {
+        public final Worldgen worldgen;
+        public final Bosses bosses;
+        public final Gameplay gameplay;
+        public final Debug debug;
+
+        private ConfigData(Worldgen worldgen, Bosses bosses, Gameplay gameplay, Debug debug) {
+            this.worldgen = worldgen;
+            this.bosses = bosses;
+            this.gameplay = gameplay;
+            this.debug = debug;
+        }
+
+        public static ConfigData fromJson(JsonObject root) {
+            Worldgen worldgen = Worldgen.fromJson(root.getAsJsonObject("worldgen"));
+            Bosses bosses = Bosses.fromJson(root.getAsJsonObject("bosses"));
+            Gameplay gameplay = Gameplay.fromJson(root.getAsJsonObject("gameplay"));
+            Debug debug = Debug.fromJson(root.getAsJsonObject("debug"));
+            return new ConfigData(worldgen, bosses, gameplay, debug);
+        }
+
+        public static ConfigData defaulted() {
+            return new ConfigData(Worldgen.defaulted(), Bosses.defaulted(), Gameplay.defaulted(), Debug.defaulted());
+        }
+
+        public JsonObject toJson() {
+            JsonObject object = new JsonObject();
+            object.add("worldgen", worldgen.toJson());
+            object.add("bosses", bosses.toJson());
+            object.add("gameplay", gameplay.toJson());
+            object.add("debug", debug.toJson());
+            return object;
+        }
+    }
+
+    public static final class Worldgen {
+        public final boolean enableAllBiomes;
+        public final Map<String, Integer> biomeWeights;
+        public final Map<String, Integer> structureWeights;
+
+        private Worldgen(boolean enableAllBiomes, Map<String, Integer> biomeWeights, Map<String, Integer> structureWeights) {
+            this.enableAllBiomes = enableAllBiomes;
+            this.biomeWeights = Collections.unmodifiableMap(new LinkedHashMap<>(biomeWeights));
+            this.structureWeights = Collections.unmodifiableMap(new LinkedHashMap<>(structureWeights));
+        }
+
+        private static Worldgen fromJson(JsonObject object) {
+            if (object == null) {
+                return defaulted();
+            }
+            boolean enableAllBiomes = object.has("enableAllBiomes") && object.get("enableAllBiomes").getAsBoolean();
+            Map<String, Integer> biomeWeights = readWeights(object.getAsJsonObject("biomeWeights"));
+            Map<String, Integer> structureWeights = readWeights(object.getAsJsonObject("structureWeights"));
+            if (biomeWeights.isEmpty()) {
+                biomeWeights = defaultBiomeWeights();
+            }
+            if (structureWeights.isEmpty()) {
+                structureWeights = defaultStructureWeights();
+            }
+            return new Worldgen(enableAllBiomes, biomeWeights, structureWeights);
+        }
+
+        private static Map<String, Integer> readWeights(JsonObject object) {
+            if (object == null) {
+                return new LinkedHashMap<>();
+            }
+            Map<String, Integer> weights = new LinkedHashMap<>();
+            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {
+                weights.put(entry.getKey(), entry.getValue().getAsInt());
+            }
+            return weights;
+        }
+
+        private static Worldgen defaulted() {
+            return new Worldgen(true, defaultBiomeWeights(), defaultStructureWeights());
+        }
+
+        private static Map<String, Integer> defaultBiomeWeights() {
+            Map<String, Integer> values = new LinkedHashMap<>();
+            values.put("glowshroom_forest", 8);
+            values.put("shadow_isles", 2);
+            values.put("light_crypt", 3);
+            return values;
+        }
+
+        private static Map<String, Integer> defaultStructureWeights() {
+            Map<String, Integer> values = new LinkedHashMap<>();
+            values.put("crystal_tower", 3);
+            values.put("lost_temple", 1);
+            values.put("mist_ruins", 2);
+            return values;
+        }
+
+        private JsonObject toJson() {
+            JsonObject object = new JsonObject();
+            object.addProperty("enableAllBiomes", enableAllBiomes);
+            object.add("biomeWeights", toWeightObject(biomeWeights));
+            object.add("structureWeights", toWeightObject(structureWeights));
+            return object;
+        }
+    }
+
+    public static final class Bosses {
+        public final boolean allowBossSpawns;
+        public final boolean naturalBossSpawns;
+        public final boolean altarSpawnsOnly;
+        public final Cooldowns cooldowns;
+        public final int maxConcurrentBosses;
+        public final boolean announceBossEvents;
+
+        private Bosses(boolean allowBossSpawns, boolean naturalBossSpawns, boolean altarSpawnsOnly,
+                       Cooldowns cooldowns, int maxConcurrentBosses, boolean announceBossEvents) {
+            this.allowBossSpawns = allowBossSpawns;
+            this.naturalBossSpawns = naturalBossSpawns;
+            this.altarSpawnsOnly = altarSpawnsOnly;
+            this.cooldowns = cooldowns;
+            this.maxConcurrentBosses = maxConcurrentBosses;
+            this.announceBossEvents = announceBossEvents;
+        }
+
+        private static Bosses fromJson(JsonObject object) {
+            if (object == null) {
+                return defaulted();
+            }
+            boolean allowBossSpawns = getBoolean(object, "allowBossSpawns", true);
+            boolean naturalBossSpawns = getBoolean(object, "naturalBossSpawns", false);
+            boolean altarSpawnsOnly = getBoolean(object, "altarSpawnsOnly", true);
+            Cooldowns cooldowns = Cooldowns.fromJson(object.getAsJsonObject("cooldowns"));
+            int maxConcurrentBosses = getInt(object, "maxConcurrentBosses", 1);
+            boolean announceBossEvents = getBoolean(object, "announceBossEvents", true);
+            return new Bosses(allowBossSpawns, naturalBossSpawns, altarSpawnsOnly, cooldowns, maxConcurrentBosses,
+                    announceBossEvents);
+        }
+
+        private static Bosses defaulted() {
+            return new Bosses(true, false, true, Cooldowns.defaulted(), 1, true);
+        }
+
+        private JsonObject toJson() {
+            JsonObject object = new JsonObject();
+            object.addProperty("allowBossSpawns", allowBossSpawns);
+            object.addProperty("naturalBossSpawns", naturalBossSpawns);
+            object.addProperty("altarSpawnsOnly", altarSpawnsOnly);
+            object.add("cooldowns", cooldowns.toJson());
+            object.addProperty("maxConcurrentBosses", maxConcurrentBosses);
+            object.addProperty("announceBossEvents", announceBossEvents);
+            return object;
+        }
+    }
+
+    public static final class Cooldowns {
+        public final int globalDays;
+        public final int perBossDays;
+
+        private Cooldowns(int globalDays, int perBossDays) {
+            this.globalDays = globalDays;
+            this.perBossDays = perBossDays;
+        }
+
+        private static Cooldowns fromJson(JsonObject object) {
+            if (object == null) {
+                return defaulted();
+            }
+            int globalDays = getInt(object, "globalDays", 7);
+            int perBossDays = getInt(object, "perBossDays", 20);
+            return new Cooldowns(globalDays, perBossDays);
+        }
+
+        private static Cooldowns defaulted() {
+            return new Cooldowns(7, 20);
+        }
+
+        private JsonObject toJson() {
+            JsonObject object = new JsonObject();
+            object.addProperty("globalDays", globalDays);
+            object.addProperty("perBossDays", perBossDays);
+            return object;
+        }
+    }
+
+    public static final class Gameplay {
+        public final boolean aetherSlowFallingInBiome;
+        public final int stormProjectileShieldTicks;
+
+        private Gameplay(boolean aetherSlowFallingInBiome, int stormProjectileShieldTicks) {
+            this.aetherSlowFallingInBiome = aetherSlowFallingInBiome;
+            this.stormProjectileShieldTicks = stormProjectileShieldTicks;
+        }
+
+        private static Gameplay fromJson(JsonObject object) {
+            if (object == null) {
+                return defaulted();
+            }
+            boolean aetherSlowFalling = getBoolean(object, "aetherSlowFallingInBiome", true);
+            int shieldTicks = getInt(object, "stormProjectileShieldTicks", 60);
+            return new Gameplay(aetherSlowFalling, shieldTicks);
+        }
+
+        private static Gameplay defaulted() {
+            return new Gameplay(true, 60);
+        }
+
+        private JsonObject toJson() {
+            JsonObject object = new JsonObject();
+            object.addProperty("aetherSlowFallingInBiome", aetherSlowFallingInBiome);
+            object.addProperty("stormProjectileShieldTicks", stormProjectileShieldTicks);
+            return object;
+        }
+    }
+
+    public static final class Debug {
+        public final boolean logAllRegistrations;
+        public final boolean datagenForce;
+
+        private Debug(boolean logAllRegistrations, boolean datagenForce) {
+            this.logAllRegistrations = logAllRegistrations;
+            this.datagenForce = datagenForce;
+        }
+
+        private static Debug fromJson(JsonObject object) {
+            if (object == null) {
+                return defaulted();
+            }
+            boolean logAllRegistrations = getBoolean(object, "logAllRegistrations", false);
+            boolean datagenForce = getBoolean(object, "datagenForce", false);
+            return new Debug(logAllRegistrations, datagenForce);
+        }
+
+        private static Debug defaulted() {
+            return new Debug(false, false);
+        }
+
+        private JsonObject toJson() {
+            JsonObject object = new JsonObject();
+            object.addProperty("logAllRegistrations", logAllRegistrations);
+            object.addProperty("datagenForce", datagenForce);
+            return object;
+        }
+    }
+
+    private static int getInt(JsonObject object, String key, int fallback) {
+        if (object == null || !object.has(key)) {
+            return fallback;
+        }
+        return object.get(key).getAsInt();
+    }
+
+    private static boolean getBoolean(JsonObject object, String key, boolean fallback) {
+        if (object == null || !object.has(key)) {
+            return fallback;
+        }
+        return object.get(key).getAsBoolean();
+    }
+
+    private static JsonObject toWeightObject(Map<String, Integer> weights) {
+        JsonObject object = new JsonObject();
+        weights.forEach(object::addProperty);
+        return object;
+    }
+
+    public static @NotNull Path resolveConfigPath() {
+        return FabricLoader.getInstance().getConfigDir().resolve(FILE_NAME);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/content/biome/GlowshroomForestBiome.java b/src/main/java/net/liam/biomsofinfinity/content/biome/GlowshroomForestBiome.java
new file mode 100644
index 0000000000000000000000000000000000000000..2eb6a4528049dfe8858543891bc84ed91f5490ae
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/content/biome/GlowshroomForestBiome.java
@@ -0,0 +1,48 @@
+package net.liam.biomsofinfinity.content.biome;
+
+import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
+import net.minecraft.registry.entry.RegistryEntryLookup;
+import net.minecraft.sound.BiomeMoodSound;
+import net.minecraft.world.biome.Biome;
+import net.minecraft.world.biome.BiomeEffects;
+import net.minecraft.world.biome.GenerationSettings;
+import net.minecraft.world.biome.SpawnSettings;
+import net.minecraft.world.gen.GenerationStep;
+
+/**
+ * Lush bioluminescent forest dominated by glowing mushrooms and fiber clusters.
+ */
+public final class GlowshroomForestBiome {
+    private GlowshroomForestBiome() {
+    }
+
+    public static Biome create(RegistryEntryLookup<net.minecraft.world.gen.feature.PlacedFeature> placedFeatures,
+                               RegistryEntryLookup<net.minecraft.world.gen.carver.ConfiguredCarver<?>> carvers) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder generationBuilder =
+                new GenerationSettings.LookupBackedBuilder(placedFeatures, carvers);
+        generationBuilder.feature(GenerationStep.Feature.VEGETAL_DECORATION,
+                placedFeatures.getOrThrow(ModPlacedFeatures.GLOWSHROOM_PATCH_PLACED_KEY));
+        generationBuilder.feature(GenerationStep.Feature.VEGETAL_DECORATION,
+                placedFeatures.getOrThrow(ModPlacedFeatures.LUMINOUS_FIBER_PATCH_PLACED_KEY));
+
+        return new Biome.Builder()
+                .precipitation(false)
+                .downfall(0.0F)
+                .temperature(0.8F)
+                .generationSettings(generationBuilder.build())
+                .spawnSettings(spawnBuilder.build())
+                .effects(new BiomeEffects.Builder()
+                        .fogColor(0x88E7FF)
+                        .skyColor(0xABD7FF)
+                        .waterColor(0x3ED7C1)
+                        .waterFogColor(0x1D7A6C)
+                        .grassColor(0x6EEBC3)
+                        .foliageColor(0x5BD5B1)
+                        .particleConfig(new BiomeEffects.ParticleConfig(net.minecraft.particle.ParticleTypes.END_ROD, 0.003F))
+                        .moodSound(BiomeMoodSound.CAVE)
+                        .build())
+                .build();
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/content/biome/LightCryptBiome.java b/src/main/java/net/liam/biomsofinfinity/content/biome/LightCryptBiome.java
new file mode 100644
index 0000000000000000000000000000000000000000..7fdc7d5fb3d2b93edaad0d3f6180143c63abf532
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/content/biome/LightCryptBiome.java
@@ -0,0 +1,47 @@
+package net.liam.biomsofinfinity.content.biome;
+
+import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
+import net.minecraft.sound.BiomeMoodSound;
+import net.minecraft.world.biome.Biome;
+import net.minecraft.world.biome.BiomeEffects;
+import net.minecraft.world.biome.GenerationSettings;
+import net.minecraft.world.biome.SpawnSettings;
+import net.minecraft.world.gen.GenerationStep;
+
+/**
+ * Radiant sanctum filled with aurora crystals and radiant pylons.
+ */
+public final class LightCryptBiome {
+    private LightCryptBiome() {
+    }
+
+    public static Biome create(net.minecraft.registry.entry.RegistryEntryLookup<net.minecraft.world.gen.feature.PlacedFeature> placedFeatures,
+                               net.minecraft.registry.entry.RegistryEntryLookup<net.minecraft.world.gen.carver.ConfiguredCarver<?>> carvers) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder generationBuilder =
+                new GenerationSettings.LookupBackedBuilder(placedFeatures, carvers);
+        generationBuilder.feature(GenerationStep.Feature.VEGETAL_DECORATION,
+                placedFeatures.getOrThrow(ModPlacedFeatures.AURORA_CRYSTAL_CLUSTER_PLACED_KEY));
+        generationBuilder.feature(GenerationStep.Feature.SURFACE_STRUCTURES,
+                placedFeatures.getOrThrow(ModPlacedFeatures.RADIANT_PYLON_PLACED_KEY));
+
+        return new Biome.Builder()
+                .precipitation(false)
+                .downfall(0.0F)
+                .temperature(0.6F)
+                .generationSettings(generationBuilder.build())
+                .spawnSettings(spawnBuilder.build())
+                .effects(new BiomeEffects.Builder()
+                        .fogColor(0xF0F6FF)
+                        .skyColor(0xE6F2FF)
+                        .waterColor(0x9CB7FF)
+                        .waterFogColor(0x7A95E8)
+                        .grassColor(0xB8D4FF)
+                        .foliageColor(0xA5CCFF)
+                        .particleConfig(new BiomeEffects.ParticleConfig(net.minecraft.particle.ParticleTypes.GLOW, 0.002F))
+                        .moodSound(BiomeMoodSound.CAVE)
+                        .build())
+                .build();
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/content/biome/ShadowIslesBiome.java b/src/main/java/net/liam/biomsofinfinity/content/biome/ShadowIslesBiome.java
new file mode 100644
index 0000000000000000000000000000000000000000..b932ecdc3dcb3e8dff7dc0637eebfe4da93de184
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/content/biome/ShadowIslesBiome.java
@@ -0,0 +1,45 @@
+package net.liam.biomsofinfinity.content.biome;
+
+import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
+import net.minecraft.sound.BiomeMoodSound;
+import net.minecraft.world.biome.Biome;
+import net.minecraft.world.biome.BiomeEffects;
+import net.minecraft.world.biome.GenerationSettings;
+import net.minecraft.world.biome.SpawnSettings;
+import net.minecraft.world.gen.GenerationStep;
+
+/**
+ * Dark ritual islands with obsidian brambles and eerie ambience.
+ */
+public final class ShadowIslesBiome {
+    private ShadowIslesBiome() {
+    }
+
+    public static Biome create(net.minecraft.registry.entry.RegistryEntryLookup<net.minecraft.world.gen.feature.PlacedFeature> placedFeatures,
+                               net.minecraft.registry.entry.RegistryEntryLookup<net.minecraft.world.gen.carver.ConfiguredCarver<?>> carvers) {
+        SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
+
+        GenerationSettings.LookupBackedBuilder generationBuilder =
+                new GenerationSettings.LookupBackedBuilder(placedFeatures, carvers);
+        generationBuilder.feature(GenerationStep.Feature.VEGETAL_DECORATION,
+                placedFeatures.getOrThrow(ModPlacedFeatures.SHADOW_BRAMBLE_PATCH_PLACED_KEY));
+
+        return new Biome.Builder()
+                .precipitation(false)
+                .temperature(0.4F)
+                .downfall(0.0F)
+                .generationSettings(generationBuilder.build())
+                .spawnSettings(spawnBuilder.build())
+                .effects(new BiomeEffects.Builder()
+                        .fogColor(0x0B0C1C)
+                        .skyColor(0x1A2038)
+                        .waterColor(0x1E2236)
+                        .waterFogColor(0x0C101F)
+                        .grassColor(0x1F1F1F)
+                        .foliageColor(0x252525)
+                        .particleConfig(new BiomeEffects.ParticleConfig(net.minecraft.particle.ParticleTypes.PORTAL, 0.001F))
+                        .moodSound(BiomeMoodSound.CAVE)
+                        .build())
+                .build();
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/content/boss/BaseBossEntity.java b/src/main/java/net/liam/biomsofinfinity/content/boss/BaseBossEntity.java
new file mode 100644
index 0000000000000000000000000000000000000000..2891bd98928ef1f1d306a694b3b89c30b67d30e3
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/content/boss/BaseBossEntity.java
@@ -0,0 +1,131 @@
+package net.liam.biomsofinfinity.content.boss;
+
+import net.liam.biomsofinfinity.world.boss.BossCooldownState;
+import net.minecraft.entity.EntityType;
+import net.minecraft.entity.ai.goal.ActiveTargetGoal;
+import net.minecraft.entity.ai.goal.LookAtEntityGoal;
+import net.minecraft.entity.ai.goal.LookAroundGoal;
+import net.minecraft.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.entity.ai.goal.SwimGoal;
+import net.minecraft.entity.boss.ServerBossBar;
+import net.minecraft.entity.boss.BossBar;
+import net.minecraft.entity.damage.DamageSource;
+import net.minecraft.entity.mob.HostileEntity;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.network.ServerPlayerEntity;
+import net.minecraft.sound.SoundEvent;
+import net.minecraft.sound.SoundEvents;
+import net.minecraft.text.Text;
+import net.minecraft.world.World;
+
+
+/**
+ * Base class shared by all custom bosses. Implements a simple boss bar, persistence of the summoning altar identifier
+ * and hooks for cinematic behaviour. Concrete bosses should override {@link #tickBoss()}, {@link #getBossMusic()} and
+ * {@link #onDefeated()}.
+ */
+public abstract class BaseBossEntity extends HostileEntity {
+    private final ServerBossBar bossBar;
+    private String altarId = "";
+
+    protected BaseBossEntity(EntityType<? extends HostileEntity> type, World world, Text displayName) {
+        super(type, world);
+        this.bossBar = new ServerBossBar(displayName, BossBar.Color.PURPLE, BossBar.Style.PROGRESS);
+        this.bossBar.setPercent(1.0F);
+        this.experiencePoints = 500;
+    }
+
+    @Override
+    protected void initGoals() {
+        this.goalSelector.add(0, new SwimGoal(this));
+        this.goalSelector.add(1, new MeleeAttackGoal(this, 1.0D, true));
+        this.goalSelector.add(2, new LookAtEntityGoal(this, PlayerEntity.class, 32.0F));
+        this.goalSelector.add(3, new LookAroundGoal(this));
+        this.targetSelector.add(0, new ActiveTargetGoal<>(this, PlayerEntity.class, true));
+    }
+
+    @Override
+    public void onStartedTrackingBy(ServerPlayerEntity player) {
+        super.onStartedTrackingBy(player);
+        bossBar.addPlayer(player);
+    }
+
+    @Override
+    public void onStoppedTrackingBy(ServerPlayerEntity player) {
+        super.onStoppedTrackingBy(player);
+        bossBar.removePlayer(player);
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        if (!this.getWorld().isClient) {
+            bossBar.setPercent(this.getHealth() / this.getMaxHealth());
+            tickBoss();
+        }
+    }
+
+    protected void tickBoss() {
+    }
+
+    @Override
+    protected void mobTick() {
+        super.mobTick();
+        if (!getWorld().isClient) {
+            if (!hasNearbyPlayer()) {
+                discard();
+            }
+        }
+    }
+
+    private boolean hasNearbyPlayer() {
+        return this.getWorld().getPlayers().stream()
+                .anyMatch(player -> player.isAlive() && player.squaredDistanceTo(this) < 1024);
+    }
+
+    @Override
+    public boolean damage(DamageSource source, float amount) {
+        return super.damage(source, amount);
+    }
+
+    @Override
+    protected void dropLoot(DamageSource source, boolean causedByPlayer) {
+        super.dropLoot(source, causedByPlayer);
+        if (!getWorld().isClient) {
+            onDefeated();
+        }
+    }
+
+    protected abstract void onDefeated();
+
+    protected SoundEvent getBossMusic() {
+        return SoundEvents.MUSIC_DISC_5;
+    }
+
+    protected void playBossMusic() {
+        SoundEvent music = getBossMusic();
+        if (music != null) {
+            this.getWorld().playSound(null, getBlockPos(), music, this.getSoundCategory(), 1.0F, 1.0F);
+        }
+    }
+
+    public void setAltarId(String altarId) {
+        this.altarId = altarId;
+    }
+
+    public String getAltarId() {
+        return altarId;
+    }
+
+    protected void triggerCooldown(String bossId) {
+        if (this.getWorld().getServer() == null) {
+            return;
+        }
+        MinecraftServer server = this.getWorld().getServer();
+        BossCooldownState state = BossCooldownState.get(server);
+        long currentTime = server.getOverworld().getTimeOfDay();
+        long ticksPerDay = 24000L;
+        state.triggerCooldown(bossId, currentTime, ticksPerDay);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/content/boss/ShadowKingEntity.java b/src/main/java/net/liam/biomsofinfinity/content/boss/ShadowKingEntity.java
new file mode 100644
index 0000000000000000000000000000000000000000..b6a21af32e346e3e1cbb2619b9e745db816ae7c5
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/content/boss/ShadowKingEntity.java
@@ -0,0 +1,96 @@
+package net.liam.biomsofinfinity.content.boss;
+
+import net.liam.biomsofinfinity.Biomsofinfinity;
+import net.liam.biomsofinfinity.item.ModItems;
+import net.minecraft.entity.EntityType;
+import net.minecraft.entity.attribute.DefaultAttributeContainer;
+import net.minecraft.entity.attribute.EntityAttributes;
+import net.minecraft.entity.effect.StatusEffectInstance;
+import net.minecraft.entity.effect.StatusEffects;
+import net.minecraft.entity.mob.HostileEntity;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.entity.damage.DamageSource;
+import net.minecraft.sound.SoundEvent;
+import net.minecraft.sound.SoundEvents;
+import net.minecraft.text.Text;
+import net.minecraft.util.Hand;
+import net.minecraft.util.Identifier;
+import net.minecraft.world.World;
+
+/**
+ * Shadow King boss that guards the Shadow Isles. Uses teleporting strikes and grants the {@code Shadow Crown} drop.
+ */
+public class ShadowKingEntity extends BaseBossEntity {
+    public static final Identifier LOOT_TABLE = Identifier.of(Biomsofinfinity.MOD_ID, "entities/shadow_king");
+    public static final String BOSS_ID = "shadow_king";
+
+    private int shadowBurstCooldown = 200;
+
+    public ShadowKingEntity(EntityType<? extends HostileEntity> type, World world) {
+        super(type, world, Text.translatable("entity.biomsofinfinity.shadow_king"));
+        this.experiencePoints = 600;
+    }
+
+    public static DefaultAttributeContainer.Builder createAttributes() {
+        return HostileEntity.createHostileAttributes()
+                .add(EntityAttributes.GENERIC_MAX_HEALTH, 400.0D)
+                .add(EntityAttributes.GENERIC_ATTACK_DAMAGE, 18.0D)
+                .add(EntityAttributes.GENERIC_ARMOR, 12.0D)
+                .add(EntityAttributes.GENERIC_MOVEMENT_SPEED, 0.35D)
+                .add(EntityAttributes.GENERIC_FOLLOW_RANGE, 48.0D);
+    }
+
+    @Override
+    protected SoundEvent getAmbientSound() {
+        return SoundEvents.ENTITY_WITHER_AMBIENT;
+    }
+
+    @Override
+    protected SoundEvent getDeathSound() {
+        return SoundEvents.ENTITY_WITHER_DEATH;
+    }
+
+    @Override
+    protected SoundEvent getHurtSound(DamageSource source) {
+        return SoundEvents.ENTITY_WITHER_HURT;
+    }
+
+    @Override
+    protected SoundEvent getBossMusic() {
+        return SoundEvents.MUSIC_DISC_OTHERSIDE;
+    }
+
+    @Override
+    protected void tickBoss() {
+        if (--shadowBurstCooldown <= 0) {
+            shadowBurstCooldown = 160 + this.getRandom().nextInt(80);
+            performShadowBurst();
+        }
+    }
+
+    private void performShadowBurst() {
+        this.addStatusEffect(new StatusEffectInstance(StatusEffects.INVISIBILITY, 60, 0));
+        this.getWorld().getPlayers().stream()
+                .filter(player -> player.squaredDistanceTo(this) < 256)
+                .forEach(player -> player.addStatusEffect(new StatusEffectInstance(StatusEffects.BLINDNESS, 60, 0)));
+        playSound(SoundEvents.ENTITY_ENDERMAN_TELEPORT, 1.0F, 0.5F + this.getRandom().nextFloat() * 0.5F);
+    }
+
+    @Override
+    protected void onDefeated() {
+        triggerCooldown(BOSS_ID);
+    }
+
+    @Override
+    public boolean interactMob(PlayerEntity player, Hand hand) {
+        if (player.getOffHandStack().isOf(ModItems.SHADOW_HEART)) {
+            player.sendMessage(Text.translatable("message.boi.boss.shadow_king.taunt"), true);
+        }
+        return super.interactMob(player, hand);
+    }
+
+    @Override
+    protected Identifier getLootTableId() {
+        return LOOT_TABLE;
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/datagen/ModAdvancementProvider.java b/src/main/java/net/liam/biomsofinfinity/datagen/ModAdvancementProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..8ee27cad77092dd7d7a5090cd0b961d086a8cc3d
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/datagen/ModAdvancementProvider.java
@@ -0,0 +1,53 @@
+package net.liam.biomsofinfinity.datagen;
+
+import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
+import net.fabricmc.fabric.api.datagen.v1.provider.FabricAdvancementProvider;
+import net.liam.biomsofinfinity.Biomsofinfinity;
+import net.liam.biomsofinfinity.block.ModBlocks;
+import net.liam.biomsofinfinity.item.ModItems;
+import net.minecraft.advancement.Advancement;
+import net.minecraft.advancement.AdvancementFrame;
+import net.minecraft.advancement.criterion.InventoryChangedCriterion;
+import net.minecraft.text.Text;
+import net.minecraft.util.Identifier;
+
+import java.util.function.Consumer;
+
+public class ModAdvancementProvider extends FabricAdvancementProvider {
+    public ModAdvancementProvider(FabricDataOutput output) {
+        super(output);
+    }
+
+    @Override
+    public void generateAdvancement(Consumer<Advancement> consumer) {
+        Advancement root = Advancement.Builder.create()
+                .display(ModItems.GLOWSHROOM_ESSENCE,
+                        Text.translatable("advancement.biomsofinfinity.root.title"),
+                        Text.translatable("advancement.biomsofinfinity.root.description"),
+                        Identifier.of("textures/gui/advancements/backgrounds/end.png"),
+                        AdvancementFrame.TASK, true, true, false)
+                .criterion("has_glowshroom", InventoryChangedCriterion.Conditions.items(ModItems.GLOWSHROOM_ESSENCE))
+                .build(Identifier.of(Biomsofinfinity.MOD_ID, "root"));
+        consumer.accept(root);
+
+        Advancement altar = Advancement.Builder.create()
+                .parent(root)
+                .display(ModBlocks.SHADOW_ALTAR.asItem(),
+                        Text.translatable("advancement.biomsofinfinity.shadow_altar.title"),
+                        Text.translatable("advancement.biomsofinfinity.shadow_altar.description"),
+                        null, AdvancementFrame.GOAL, true, true, false)
+                .criterion("altar", InventoryChangedCriterion.Conditions.items(ModBlocks.SHADOW_ALTAR))
+                .build(Identifier.of(Biomsofinfinity.MOD_ID, "shadow_altar"));
+        consumer.accept(altar);
+
+        Advancement crown = Advancement.Builder.create()
+                .parent(root)
+                .display(ModItems.SHADOW_CROWN,
+                        Text.translatable("advancement.biomsofinfinity.shadow_crown.title"),
+                        Text.translatable("advancement.biomsofinfinity.shadow_crown.description"),
+                        null, AdvancementFrame.CHALLENGE, true, true, true)
+                .criterion("crown", InventoryChangedCriterion.Conditions.items(ModItems.SHADOW_CROWN))
+                .build(Identifier.of(Biomsofinfinity.MOD_ID, "shadow_crown"));
+        consumer.accept(crown);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/datagen/ModDataGeneration.java b/src/main/java/net/liam/biomsofinfinity/datagen/ModDataGeneration.java
index 662b0ee88fc09b4bf546288d1f0eb701140f8e6f..93752e377b91493af7605c36e7be08ac55893feb 100644
--- a/src/main/java/net/liam/biomsofinfinity/datagen/ModDataGeneration.java
+++ b/src/main/java/net/liam/biomsofinfinity/datagen/ModDataGeneration.java
@@ -1,25 +1,28 @@
 package net.liam.biomsofinfinity.datagen;
 
 import net.fabricmc.fabric.api.datagen.v1.DataGeneratorEntrypoint;
 import net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;
 import net.liam.biomsofinfinity.world.biome.ModBiomes;
 import net.liam.biomsofinfinity.world.feature.ModConfiguredFeatures;
 import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
 import net.minecraft.registry.RegistryBuilder;
 import net.minecraft.registry.RegistryKeys;
 
 public class ModDataGeneration implements DataGeneratorEntrypoint {
     @Override
     public void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {
         FabricDataGenerator.Pack pack = fabricDataGenerator.createPack();
 
-        // Hier können weitere Data Provider hinzugefügt werden wenn nötig
+        pack.addProvider(ModModelProvider::new);
+        pack.addProvider(ModLootTableProvider::new);
+        pack.addProvider(ModRecipeProvider::new);
+        pack.addProvider(ModAdvancementProvider::new);
     }
 
     @Override
     public void buildRegistry(RegistryBuilder registryBuilder) {
         registryBuilder.addRegistry(RegistryKeys.CONFIGURED_FEATURE, ModConfiguredFeatures::bootstrap);
         registryBuilder.addRegistry(RegistryKeys.PLACED_FEATURE, ModPlacedFeatures::bootstrap);
         registryBuilder.addRegistry(RegistryKeys.BIOME, ModBiomes::bootstrap);
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/datagen/ModLootTableProvider.java b/src/main/java/net/liam/biomsofinfinity/datagen/ModLootTableProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..3c09e6b57a5cca68760bd581af9071a9a98099ed
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/datagen/ModLootTableProvider.java
@@ -0,0 +1,25 @@
+package net.liam.biomsofinfinity.datagen;
+
+import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
+import net.fabricmc.fabric.api.datagen.v1.provider.FabricBlockLootTableProvider;
+import net.liam.biomsofinfinity.block.ModBlocks;
+
+public class ModLootTableProvider extends FabricBlockLootTableProvider {
+    public ModLootTableProvider(FabricDataOutput dataOutput) {
+        super(dataOutput);
+    }
+
+    @Override
+    protected void generate() {
+        addDrop(ModBlocks.MIST_GRANITE);
+        addDrop(ModBlocks.GLOWING_MOSS_BLOCK);
+        addDrop(ModBlocks.ETHEREAL_LOG);
+        addDrop(ModBlocks.LUMINOUS_FIBER_BLOCK);
+        addDrop(ModBlocks.SHADOW_SLATE);
+        addDrop(ModBlocks.SHADOW_ALTAR);
+        addDrop(ModBlocks.GLOWSHROOM_PLANT);
+        addDrop(ModBlocks.OBSIDIAN_BRAMBLE);
+        addDrop(ModBlocks.AURORA_GLASS);
+        addDrop(ModBlocks.RADIANT_PYLON);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/datagen/ModModelProvider.java b/src/main/java/net/liam/biomsofinfinity/datagen/ModModelProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..3b0dfda0183878ad3d179eae62e2014052dde6c0
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/datagen/ModModelProvider.java
@@ -0,0 +1,48 @@
+package net.liam.biomsofinfinity.datagen;
+
+import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
+import net.fabricmc.fabric.api.datagen.v1.provider.FabricModelProvider;
+import net.liam.biomsofinfinity.block.ModBlocks;
+import net.liam.biomsofinfinity.item.ModItems;
+import net.minecraft.data.client.BlockStateModelGenerator;
+import net.minecraft.data.client.ItemModelGenerator;
+import net.minecraft.data.client.Models;
+
+public class ModModelProvider extends FabricModelProvider {
+    public ModModelProvider(FabricDataOutput output) {
+        super(output);
+    }
+
+    @Override
+    public void generateBlockStateModels(BlockStateModelGenerator blockStateModelGenerator) {
+        blockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.LUMINOUS_FIBER_BLOCK);
+        blockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.SHADOW_SLATE);
+        blockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.AURORA_GLASS);
+        blockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.MIST_GRANITE);
+        blockStateModelGenerator.registerCubeAllModelTexturePool(ModBlocks.GLOWING_MOSS_BLOCK);
+        blockStateModelGenerator.registerLog(ModBlocks.ETHEREAL_LOG).log(ModBlocks.ETHEREAL_LOG);
+        blockStateModelGenerator.registerLog(ModBlocks.RADIANT_PYLON).log(ModBlocks.RADIANT_PYLON);
+        blockStateModelGenerator.registerSimpleState(ModBlocks.SHADOW_ALTAR);
+        blockStateModelGenerator.registerSimpleState(ModBlocks.GLOWSHROOM_PLANT);
+        blockStateModelGenerator.registerSimpleState(ModBlocks.OBSIDIAN_BRAMBLE);
+    }
+
+    @Override
+    public void generateItemModels(ItemModelGenerator itemModelGenerator) {
+        itemModelGenerator.register(ModItems.GLOWSHROOM_ESSENCE, Models.GENERATED);
+        itemModelGenerator.register(ModItems.LUMINOUS_FIBER, Models.GENERATED);
+        itemModelGenerator.register(ModItems.SHADOW_HEART, Models.GENERATED);
+        itemModelGenerator.register(ModItems.DARK_VEIL, Models.GENERATED);
+        itemModelGenerator.register(ModItems.SHADOW_CROWN, Models.GENERATED);
+        itemModelGenerator.register(ModItems.AURORA_FLARE, Models.GENERATED);
+        itemModelGenerator.register(ModItems.BRIGHT_SHARD, Models.GENERATED);
+        itemModelGenerator.register(ModItems.MIST_GLIMMER, Models.GENERATED);
+        itemModelGenerator.register(ModItems.MIST_CRYSTAL, Models.GENERATED);
+        itemModelGenerator.register(ModItems.GHOST_ESSENCE, Models.GENERATED);
+        itemModelGenerator.register(ModItems.PRISMATIC_CRYSTAL, Models.GENERATED);
+        itemModelGenerator.register(ModItems.CRYSTAL_SHARD, Models.GENERATED);
+        itemModelGenerator.register(ModItems.CHROMATIC_DUST, Models.GENERATED);
+        itemModelGenerator.register(ModItems.CRYSTAL_SWORD, Models.HANDHELD);
+        itemModelGenerator.register(ModItems.MIST_PICKAXE, Models.HANDHELD);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/datagen/ModRecipeProvider.java b/src/main/java/net/liam/biomsofinfinity/datagen/ModRecipeProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..d75e895fcd2da4e2af93466bd25cd10eca34213b
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/datagen/ModRecipeProvider.java
@@ -0,0 +1,44 @@
+package net.liam.biomsofinfinity.datagen;
+
+import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
+import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
+import net.liam.biomsofinfinity.block.ModBlocks;
+import net.liam.biomsofinfinity.item.ModItems;
+import net.minecraft.data.server.recipe.RecipeExporter;
+import net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder;
+import net.minecraft.recipe.book.RecipeCategory;
+
+public class ModRecipeProvider extends FabricRecipeProvider {
+    public ModRecipeProvider(FabricDataOutput output) {
+        super(output);
+    }
+
+    @Override
+    public void generate(RecipeExporter exporter) {
+        ShapedRecipeJsonBuilder.create(RecipeCategory.DECORATIONS, ModBlocks.SHADOW_ALTAR)
+                .pattern("SSS")
+                .pattern("L L")
+                .pattern("OOO")
+                .input('S', ModBlocks.SHADOW_SLATE)
+                .input('L', ModItems.LUMINOUS_FIBER)
+                .input('O', ModBlocks.LUMINOUS_FIBER_BLOCK)
+                .criterion(hasItem(ModBlocks.SHADOW_SLATE), conditionsFromItem(ModBlocks.SHADOW_SLATE))
+                .offerTo(exporter);
+
+        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, ModBlocks.LUMINOUS_FIBER_BLOCK, 4)
+                .pattern("FF")
+                .pattern("FF")
+                .input('F', ModItems.LUMINOUS_FIBER)
+                .criterion(hasItem(ModItems.LUMINOUS_FIBER), conditionsFromItem(ModItems.LUMINOUS_FIBER))
+                .offerTo(exporter);
+
+        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, ModBlocks.RADIANT_PYLON)
+                .pattern(" G ")
+                .pattern(" G ")
+                .pattern(" Q ")
+                .input('G', ModBlocks.AURORA_GLASS)
+                .input('Q', ModBlocks.LUMINOUS_FIBER_BLOCK)
+                .criterion(hasItem(ModBlocks.AURORA_GLASS), conditionsFromItem(ModBlocks.AURORA_GLASS))
+                .offerTo(exporter);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/entity/ModEntities.java b/src/main/java/net/liam/biomsofinfinity/entity/ModEntities.java
index 058ec1c10f3d872bd68d0aacd81a301edf924037..1dd428238fe5285287bcf06c9aa893d008a7fb68 100644
--- a/src/main/java/net/liam/biomsofinfinity/entity/ModEntities.java
+++ b/src/main/java/net/liam/biomsofinfinity/entity/ModEntities.java
@@ -18,34 +18,43 @@ public class ModEntities {
             EntityType.Builder.create(MistSpiritEntity::new, SpawnGroup.MONSTER)
                     .dimensions(0.6f, 1.95f)
                     .build(RegistryKey.of(RegistryKeys.ENTITY_TYPE, Identifier.of(Biomsofinfinity.MOD_ID, "mist_spirit"))));
 
     public static final EntityType<MistWolfEntity> MIST_WOLF = Registry.register(
             Registries.ENTITY_TYPE,
             Identifier.of(Biomsofinfinity.MOD_ID, "mist_wolf"),
             EntityType.Builder.create(MistWolfEntity::new, SpawnGroup.CREATURE)
                     .dimensions(0.6f, 0.85f)
                     .build(RegistryKey.of(RegistryKeys.ENTITY_TYPE, Identifier.of(Biomsofinfinity.MOD_ID, "mist_wolf"))));
 
     public static final EntityType<CrystalGolemEntity> CRYSTAL_GOLEM = Registry.register(
             Registries.ENTITY_TYPE,
             Identifier.of(Biomsofinfinity.MOD_ID, "crystal_golem"),
             EntityType.Builder.create(CrystalGolemEntity::new, SpawnGroup.MONSTER)
                     .dimensions(1.4f, 2.7f)
                     .build(RegistryKey.of(RegistryKeys.ENTITY_TYPE, Identifier.of(Biomsofinfinity.MOD_ID, "crystal_golem"))));
 
     public static final EntityType<CrystalSpiderEntity> CRYSTAL_SPIDER = Registry.register(
             Registries.ENTITY_TYPE,
             Identifier.of(Biomsofinfinity.MOD_ID, "crystal_spider"),
             EntityType.Builder.create(CrystalSpiderEntity::new, SpawnGroup.MONSTER)
                     .dimensions(0.7f, 0.5f)
                     .build(RegistryKey.of(RegistryKeys.ENTITY_TYPE, Identifier.of(Biomsofinfinity.MOD_ID, "crystal_spider"))));
 
+    public static final EntityType<net.liam.biomsofinfinity.content.boss.ShadowKingEntity> SHADOW_KING = Registry.register(
+            Registries.ENTITY_TYPE,
+            Identifier.of(Biomsofinfinity.MOD_ID, "shadow_king"),
+            EntityType.Builder.create(net.liam.biomsofinfinity.content.boss.ShadowKingEntity::new, SpawnGroup.MONSTER)
+                    .dimensions(1.0f, 3.6f)
+                    .fireImmune()
+                    .build(RegistryKey.of(RegistryKeys.ENTITY_TYPE, Identifier.of(Biomsofinfinity.MOD_ID, "shadow_king"))));
+
     public static void registerModEntities() {
         Biomsofinfinity.LOGGER.info("Registering ModEntities for " + Biomsofinfinity.MOD_ID);
 
         FabricDefaultAttributeRegistry.register(MIST_SPIRIT, MistSpiritEntity.createMistSpiritAttributes());
         FabricDefaultAttributeRegistry.register(MIST_WOLF, MistWolfEntity.createMistWolfAttributes());
         FabricDefaultAttributeRegistry.register(CRYSTAL_GOLEM, CrystalGolemEntity.createCrystalGolemAttributes());
         FabricDefaultAttributeRegistry.register(CRYSTAL_SPIDER, CrystalSpiderEntity.createCrystalSpiderAttributes());
+        FabricDefaultAttributeRegistry.register(SHADOW_KING, net.liam.biomsofinfinity.content.boss.ShadowKingEntity.createAttributes());
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/item/AuroraFlareItem.java b/src/main/java/net/liam/biomsofinfinity/item/AuroraFlareItem.java
new file mode 100644
index 0000000000000000000000000000000000000000..ffcd8bea59574d4be5b0806825e49eeff325ae3c
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/item/AuroraFlareItem.java
@@ -0,0 +1,37 @@
+package net.liam.biomsofinfinity.item;
+
+import net.minecraft.entity.effect.StatusEffectInstance;
+import net.minecraft.entity.effect.StatusEffects;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemStack;
+import net.minecraft.sound.SoundCategory;
+import net.minecraft.sound.SoundEvents;
+import net.minecraft.util.Hand;
+import net.minecraft.util.TypedActionResult;
+import net.minecraft.world.World;
+
+/**
+ * Throwable-inspired light burst. Currently grants Glowing and Night Vision to nearby allies.
+ */
+public class AuroraFlareItem extends Item {
+    public AuroraFlareItem(Settings settings) {
+        super(settings);
+    }
+
+    @Override
+    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
+        ItemStack stack = user.getStackInHand(hand);
+        if (!world.isClient) {
+            world.playSound(null, user.getBlockPos(), SoundEvents.BLOCK_AMETHYST_BLOCK_CHIME, SoundCategory.PLAYERS, 1.0F, 1.3F);
+            user.addStatusEffect(new StatusEffectInstance(StatusEffects.NIGHT_VISION, 20 * 20, 0));
+            world.getPlayers().stream()
+                    .filter(player -> player.squaredDistanceTo(user) < 100)
+                    .forEach(player -> player.addStatusEffect(new StatusEffectInstance(StatusEffects.GLOWING, 20 * 20, 0)));
+            if (!user.isCreative()) {
+                stack.decrement(1);
+            }
+        }
+        return TypedActionResult.success(stack, world.isClient);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/item/DarkVeilItem.java b/src/main/java/net/liam/biomsofinfinity/item/DarkVeilItem.java
new file mode 100644
index 0000000000000000000000000000000000000000..a55bab00ff88cfe67cb1b03cf9e3ef2f46608e28
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/item/DarkVeilItem.java
@@ -0,0 +1,36 @@
+package net.liam.biomsofinfinity.item;
+
+import net.minecraft.entity.effect.StatusEffectInstance;
+import net.minecraft.entity.effect.StatusEffects;
+import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemStack;
+import net.minecraft.sound.SoundCategory;
+import net.minecraft.sound.SoundEvents;
+import net.minecraft.util.Hand;
+import net.minecraft.util.TypedActionResult;
+import net.minecraft.world.World;
+
+/**
+ * Cloak-like consumable that grants a short burst of invisibility.
+ */
+public class DarkVeilItem extends Item {
+    public DarkVeilItem(Settings settings) {
+        super(settings);
+    }
+
+    @Override
+    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
+        ItemStack stack = user.getStackInHand(hand);
+        if (!world.isClient) {
+            user.addStatusEffect(new StatusEffectInstance(StatusEffects.INVISIBILITY, 20 * 8, 0));
+            user.addStatusEffect(new StatusEffectInstance(StatusEffects.SPEED, 20 * 8, 1));
+            user.getItemCooldownManager().set(this, 20 * 45);
+            if (!user.isCreative()) {
+                stack.decrement(1);
+            }
+            world.playSound(null, user.getBlockPos(), SoundEvents.ENTITY_ENDERMAN_SCREAM, SoundCategory.PLAYERS, 0.6F, 1.2F);
+        }
+        return TypedActionResult.success(stack, world.isClient);
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/item/ModItems.java b/src/main/java/net/liam/biomsofinfinity/item/ModItems.java
index eba68bff5e0508ef4c56dec301670732721b810e..81149be5a3869cd98bf90bef5e59c634f4bc1719 100644
--- a/src/main/java/net/liam/biomsofinfinity/item/ModItems.java
+++ b/src/main/java/net/liam/biomsofinfinity/item/ModItems.java
@@ -1,72 +1,112 @@
 package net.liam.biomsofinfinity.item;
 
 import net.fabricmc.fabric.api.itemgroup.v1.ItemGroupEvents;
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemGroups;
 import net.minecraft.registry.Registries;
 import net.minecraft.registry.Registry;
 import net.minecraft.registry.RegistryKey;
 import net.minecraft.registry.RegistryKeys;
 import net.minecraft.util.Identifier;
 
+
 public class ModItems {
 
     // Helpers
     private static RegistryKey<Item> key(String name) {
         return RegistryKey.of(RegistryKeys.ITEM, Identifier.of(Biomsofinfinity.MOD_ID, name));
     }
     private static Item registerItem(String name, Item item) {
         return Registry.register(Registries.ITEM, Identifier.of(Biomsofinfinity.MOD_ID, name), item);
     }
 
     // Mist Peaks Items
     public static final Item MIST_GLIMMER = registerItem("mist_glimmer",
             new Item(new Item.Settings().registryKey(key("mist_glimmer"))));
 
     public static final Item MIST_CRYSTAL = registerItem("mist_crystal",
             new MistCrystalItem(new Item.Settings().maxCount(16).registryKey(key("mist_crystal"))));
 
     public static final Item GHOST_ESSENCE = registerItem("ghost_essence",
             new Item(new Item.Settings().maxCount(64).registryKey(key("ghost_essence"))));
 
     // Crystal Grove Items
     public static final Item PRISMATIC_CRYSTAL = registerItem("prismatic_crystal",
             new PrismaticCrystalItem(new Item.Settings().maxCount(16).registryKey(key("prismatic_crystal"))));
 
     public static final Item CRYSTAL_SHARD = registerItem("crystal_shard",
             new Item(new Item.Settings().registryKey(key("crystal_shard"))));
 
     public static final Item CHROMATIC_DUST = registerItem("chromatic_dust",
             new Item(new Item.Settings().registryKey(key("chromatic_dust"))));
 
+    // Glowshroom Forest
+    public static final Item GLOWSHROOM_ESSENCE = registerItem("glowshroom_essence",
+            new TooltipItem(new Item.Settings().maxCount(32).registryKey(key("glowshroom_essence")),
+                    "item.biomsofinfinity.glowshroom_essence.tooltip"));
+
+    public static final Item LUMINOUS_FIBER = registerItem("luminous_fiber",
+            new TooltipItem(new Item.Settings().registryKey(key("luminous_fiber")),
+                    "item.biomsofinfinity.luminous_fiber.tooltip"));
+
+    // Shadow Isles
+    public static final Item SHADOW_HEART = registerItem("shadow_heart",
+            new TooltipItem(new Item.Settings().maxCount(1).fireproof().registryKey(key("shadow_heart")),
+                    "item.biomsofinfinity.shadow_heart.tooltip"));
+
+    public static final Item DARK_VEIL = registerItem("dark_veil",
+            new DarkVeilItem(new Item.Settings().maxCount(16).registryKey(key("dark_veil"))));
+
+    public static final Item SHADOW_CROWN = registerItem("shadow_crown",
+            new TooltipItem(new Item.Settings().rarity(net.minecraft.util.Rarity.UNCOMMON).registryKey(key("shadow_crown")),
+                    "item.biomsofinfinity.shadow_crown.tooltip"));
+
+    // Light Crypt
+    public static final Item AURORA_FLARE = registerItem("aurora_flare",
+            new AuroraFlareItem(new Item.Settings().maxCount(16).registryKey(key("aurora_flare"))));
+
+    public static final Item BRIGHT_SHARD = registerItem("bright_shard",
+            new TooltipItem(new Item.Settings().registryKey(key("bright_shard")),
+                    "item.biomsofinfinity.bright_shard.tooltip"));
+
     // Tools
     public static final Item CRYSTAL_SWORD = registerItem("crystal_sword",
             new CrystalSwordItem(new Item.Settings().registryKey(key("crystal_sword"))));
 
     public static final Item MIST_PICKAXE = registerItem("mist_pickaxe",
             new MistPickaxeItem(new Item.Settings()
                     .maxDamage(ModToolMaterials.MistMaterial.DURABILITY)
                     .registryKey(key("mist_pickaxe"))));
 
     public static void registerModItems() {
         Biomsofinfinity.LOGGER.info("Registering ModItems for {}", Biomsofinfinity.MOD_ID);
 
         ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(entries -> {
             entries.add(MIST_GLIMMER);
             entries.add(MIST_CRYSTAL);
             entries.add(GHOST_ESSENCE);
             entries.add(PRISMATIC_CRYSTAL);
             entries.add(CRYSTAL_SHARD);
             entries.add(CHROMATIC_DUST);
+            entries.add(GLOWSHROOM_ESSENCE);
+            entries.add(LUMINOUS_FIBER);
+            entries.add(SHADOW_HEART);
+            entries.add(BRIGHT_SHARD);
         });
 
         ItemGroupEvents.modifyEntriesEvent(ItemGroups.COMBAT).register(entries -> {
             entries.add(CRYSTAL_SWORD);
+            entries.add(DARK_VEIL);
+            entries.add(AURORA_FLARE);
         });
 
         ItemGroupEvents.modifyEntriesEvent(ItemGroups.TOOLS).register(entries -> {
             entries.add(MIST_PICKAXE);
         });
+
+        ItemGroupEvents.modifyEntriesEvent(ItemGroups.COMBAT).register(entries -> {
+            entries.add(SHADOW_CROWN);
+        });
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/item/TooltipItem.java b/src/main/java/net/liam/biomsofinfinity/item/TooltipItem.java
new file mode 100644
index 0000000000000000000000000000000000000000..7cf27a94374bca68eb6cb8ce01378edc8db5a63e
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/item/TooltipItem.java
@@ -0,0 +1,27 @@
+package net.liam.biomsofinfinity.item;
+
+import net.minecraft.client.item.TooltipContext;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemStack;
+import net.minecraft.text.Text;
+import net.minecraft.world.World;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+/**
+ * Simple utility item that displays a translatable tooltip explaining the item's gameplay purpose.
+ */
+public class TooltipItem extends Item {
+    private final String tooltipKey;
+
+    public TooltipItem(Settings settings, String tooltipKey) {
+        super(settings);
+        this.tooltipKey = tooltipKey;
+    }
+
+    @Override
+    public void appendTooltip(ItemStack stack, @Nullable World world, List<Text> tooltip, TooltipContext context) {
+        tooltip.add(Text.translatable(tooltipKey));
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java b/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java
index 6b7c9b36dd9f9067bdc365d155ea10032a3dd867..4c3ed46893c4ab94ffdaeb0171e42b1163a0ce93 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/ModWorldGeneration.java
@@ -1,42 +1,57 @@
 package net.liam.biomsofinfinity.world;
 
 import net.fabricmc.fabric.api.biome.v1.BiomeModifications;
 import net.fabricmc.fabric.api.biome.v1.BiomeSelectors;
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.liam.biomsofinfinity.world.biome.ModBiomes;
 import net.liam.biomsofinfinity.world.feature.ModPlacedFeatures;
 import net.minecraft.world.gen.GenerationStep;
 
 public class ModWorldGeneration {
 
     public static void generateModWorldGen() {
         Biomsofinfinity.LOGGER.info("Registering biome modifications for " + Biomsofinfinity.MOD_ID);
 
-        // Nebelgranit-Adern NUR in Nebelwipfel
         BiomeModifications.addFeature(
-                BiomeSelectors.includeByKey(ModBiomes.NEBELWIPFEL),
-                GenerationStep.Feature.UNDERGROUND_ORES,
-                ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY
-        );
+                BiomeSelectors.includeByKey(ModBiomes.GLOWSHROOM_FOREST),
+                GenerationStep.Feature.VEGETAL_DECORATION,
+                ModPlacedFeatures.GLOWSHROOM_PATCH_PLACED_KEY);
+
+        BiomeModifications.addFeature(
+                BiomeSelectors.includeByKey(ModBiomes.GLOWSHROOM_FOREST),
+                GenerationStep.Feature.VEGETAL_DECORATION,
+                ModPlacedFeatures.LUMINOUS_FIBER_PATCH_PLACED_KEY);
 
-        // Leuchtendes Moos NUR in beiden custom Biomen
         BiomeModifications.addFeature(
                 BiomeSelectors.includeByKey(ModBiomes.NEBELWIPFEL, ModBiomes.KRISTALLHAIN),
                 GenerationStep.Feature.VEGETAL_DECORATION,
-                ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY
-        );
+                ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY);
 
-        // Ethereal Trees NUR im Kristallhain
         BiomeModifications.addFeature(
                 BiomeSelectors.includeByKey(ModBiomes.KRISTALLHAIN),
                 GenerationStep.Feature.VEGETAL_DECORATION,
-                ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY
-        );
+                ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY);
 
-        // ENTFERNT: Features aus dem gesamten End
-        // Keine Features mehr in foundInTheEnd() Biomen
+        BiomeModifications.addFeature(
+                BiomeSelectors.includeByKey(ModBiomes.NEBELWIPFEL),
+                GenerationStep.Feature.UNDERGROUND_ORES,
+                ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY);
+
+        BiomeModifications.addFeature(
+                BiomeSelectors.includeByKey(ModBiomes.SHADOW_ISLES),
+                GenerationStep.Feature.VEGETAL_DECORATION,
+                ModPlacedFeatures.SHADOW_BRAMBLE_PATCH_PLACED_KEY);
+
+        BiomeModifications.addFeature(
+                BiomeSelectors.includeByKey(ModBiomes.LIGHT_CRYPT),
+                GenerationStep.Feature.VEGETAL_DECORATION,
+                ModPlacedFeatures.AURORA_CRYSTAL_CLUSTER_PLACED_KEY);
+
+        BiomeModifications.addFeature(
+                BiomeSelectors.includeByKey(ModBiomes.LIGHT_CRYPT),
+                GenerationStep.Feature.SURFACE_STRUCTURES,
+                ModPlacedFeatures.RADIANT_PYLON_PLACED_KEY);
 
-        Biomsofinfinity.LOGGER.info("Biome modifications registered successfully!");
-        Biomsofinfinity.LOGGER.info("Nebelwipfel and Kristallhain biomes are now available!");
+        Biomsofinfinity.LOGGER.info("Biome modifications registered successfully for new End biomes.");
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java b/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java
index 2b59bf6eef99e0b17d05ac3960f8aa2f2a069301..1a0059c967cc28a91030047003b6baa5d0f41d04 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/biome/EndBiomeIntegration.java
@@ -1,26 +1,23 @@
 package net.liam.biomsofinfinity.world.biome;
 
 import net.fabricmc.fabric.api.biome.v1.TheEndBiomes;
 import net.liam.biomsofinfinity.Biomsofinfinity;
 
 public class EndBiomeIntegration {
 
     public static void registerEndBiomes() {
         try {
             Biomsofinfinity.LOGGER.info("Registering End biomes for " + Biomsofinfinity.MOD_ID);
 
-            // Nebelwipfel als Hochland-Biom (gleichwertig mit End-Hochland)
-            TheEndBiomes.addHighlandsBiome(ModBiomes.NEBELWIPFEL, 1.0);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.GLOWSHROOM_FOREST, 0.8);
+            TheEndBiomes.addHighlandsBiome(ModBiomes.SHADOW_ISLES, 0.3);
+            TheEndBiomes.addSmallIslandsBiome(ModBiomes.LIGHT_CRYPT, 0.5);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.GLOWSHROOM_FOREST, ModBiomes.LIGHT_CRYPT, 0.6);
+            TheEndBiomes.addMidlandsBiome(ModBiomes.SHADOW_ISLES, ModBiomes.GLOWSHROOM_FOREST, 0.4);
 
-            // Kristallhain als kleinere Inseln für mehr Variation
-            TheEndBiomes.addSmallIslandsBiome(ModBiomes.KRISTALLHAIN, 1.0);
-
-            // Optional: Auch als Mitte-Inseln für Übergänge
-            TheEndBiomes.addMidlandsBiome(ModBiomes.NEBELWIPFEL, ModBiomes.KRISTALLHAIN, 0.5);
-
-            Biomsofinfinity.LOGGER.info("End biomes registered successfully - Nebelwipfel and Kristallhain are now part of the End dimension!");
+            Biomsofinfinity.LOGGER.info("End biomes registered successfully - Glowshroom Forest, Shadow Isles and Light Crypt are now part of the End dimension!");
         } catch (Exception e) {
             Biomsofinfinity.LOGGER.warn("Could not register End biomes (this is normal during bootstrap): " + e.getMessage());
         }
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java b/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java
index 14cba9dfa7b69d84e099bce997af72ebf2e85df3..e7f551317a0271f20479230b8e9aab3a9b086425 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/biome/ModBiomes.java
@@ -1,55 +1,61 @@
 package net.liam.biomsofinfinity.world.biome;
 
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.minecraft.registry.Registerable;
 import net.minecraft.registry.RegistryKey;
 import net.minecraft.registry.RegistryKeys;
 import net.minecraft.sound.BiomeMoodSound;
 import net.minecraft.util.Identifier;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeEffects;
 import net.minecraft.world.biome.GenerationSettings;
 import net.minecraft.world.biome.SpawnSettings;
 
 public class ModBiomes {
 
-    // Nebelwipfel - mystische Gebirgskette mit schwebenden Inseln
     public static final RegistryKey<Biome> NEBELWIPFEL = RegistryKey.of(RegistryKeys.BIOME,
             Identifier.of(Biomsofinfinity.MOD_ID, "nebelwipfel"));
-
-    // Kristallhain - verwunschener Wald aus durchscheinenden Kristallen
     public static final RegistryKey<Biome> KRISTALLHAIN = RegistryKey.of(RegistryKeys.BIOME,
             Identifier.of(Biomsofinfinity.MOD_ID, "kristallhain"));
 
-    // Legacy Namen für Rückwärtskompatibilität
+    public static final RegistryKey<Biome> GLOWSHROOM_FOREST = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "glowshroom_forest"));
+    public static final RegistryKey<Biome> SHADOW_ISLES = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "shadow_isles"));
+    public static final RegistryKey<Biome> LIGHT_CRYPT = RegistryKey.of(RegistryKeys.BIOME,
+            Identifier.of(Biomsofinfinity.MOD_ID, "light_crypt"));
+
     public static final RegistryKey<Biome> MIST_PEAKS = NEBELWIPFEL;
     public static final RegistryKey<Biome> CRYSTAL_GROVE = KRISTALLHAIN;
 
     public static void bootstrap(Registerable<Biome> context) {
         context.register(NEBELWIPFEL, createNebelwipfel(context));
         context.register(KRISTALLHAIN, createKristallhain(context));
+        context.register(GLOWSHROOM_FOREST, createGlowshroomForest(context));
+        context.register(SHADOW_ISLES, createShadowIsles(context));
+        context.register(LIGHT_CRYPT, createLightCrypt(context));
     }
 
     public static Biome createNebelwipfel(Registerable<Biome> context) {
         SpawnSettings.Builder spawnBuilder = new SpawnSettings.Builder();
         // Spawn settings für Nebelgeister und Nebelwölfe werden später erweitert
 
         GenerationSettings.LookupBackedBuilder biomeBuilder =
                 new GenerationSettings.LookupBackedBuilder(context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
                         context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
 
         // Füge Mist Granite Ore als Underground Feature hinzu
         biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.UNDERGROUND_ORES,
             context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
                 net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.MIST_GRANITE_ORE_PLACED_KEY));
 
         // Füge Glowing Moss als Surface Feature hinzu
         biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
             context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
                 net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY));
 
         return new Biome.Builder()
                 .precipitation(false) // Kein Regen, nur Nebel
                 .downfall(0.1f) // Sehr wenig Niederschlag
                 .temperature(0.2f) // Kühl in den Bergen
                 .generationSettings(biomeBuilder.build())
@@ -79,26 +85,44 @@ public class ModBiomes {
             context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
                 net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.GLOWING_MOSS_PATCH_PLACED_KEY));
 
         // Füge Ethereal Trees als Surface Feature hinzu
         biomeBuilder.feature(net.minecraft.world.gen.GenerationStep.Feature.VEGETAL_DECORATION,
             context.getRegistryLookup(RegistryKeys.PLACED_FEATURE).getOrThrow(
                 net.liam.biomsofinfinity.world.feature.ModPlacedFeatures.ETHEREAL_TREE_PLACED_KEY));
 
         return new Biome.Builder()
                 .precipitation(false) // Magische Atmosphäre ohne Regen
                 .downfall(0.0f) // Trocken, nur kristalline Atmosphäre
                 .temperature(0.4f) // Mild temperiert durch Kristallenergie
                 .generationSettings(biomeBuilder.build())
                 .spawnSettings(spawnBuilder.build())
                 .effects(new BiomeEffects.Builder()
                         .waterColor(0x9966CC) // Violett-bläulich für kristallines Wasser
                         .waterFogColor(0x6633AA) // Tiefer Violettton
                         .skyColor(0xB19CD9) // Violett-blauer Himmel mit Lichtbrechung
                         .grassColor(0x8A5FBF) // Dunkles Violett für Vegetation
                         .foliageColor(0x9A6FCF) // Kristallines Violett für Blätter
                         .fogColor(0xD4C4F0) // Heller violetter Nebel mit Prismeneffekt
                         .moodSound(BiomeMoodSound.CAVE)
                         .build())
                 .build();
     }
+
+    private static Biome createGlowshroomForest(Registerable<Biome> context) {
+        return net.liam.biomsofinfinity.content.biome.GlowshroomForestBiome.create(
+                context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
+                context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
+    }
+
+    private static Biome createShadowIsles(Registerable<Biome> context) {
+        return net.liam.biomsofinfinity.content.biome.ShadowIslesBiome.create(
+                context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
+                context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
+    }
+
+    private static Biome createLightCrypt(Registerable<Biome> context) {
+        return net.liam.biomsofinfinity.content.biome.LightCryptBiome.create(
+                context.getRegistryLookup(RegistryKeys.PLACED_FEATURE),
+                context.getRegistryLookup(RegistryKeys.CONFIGURED_CARVER));
+    }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/world/boss/BossCooldownState.java b/src/main/java/net/liam/biomsofinfinity/world/boss/BossCooldownState.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d28160739bfadc10e3d25891bb76fdd330a9c7b
--- /dev/null
+++ b/src/main/java/net/liam/biomsofinfinity/world/boss/BossCooldownState.java
@@ -0,0 +1,88 @@
+package net.liam.biomsofinfinity.world.boss;
+
+import net.liam.biomsofinfinity.config.BOIConfig;
+import net.minecraft.nbt.NbtCompound;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.PersistentState;
+import net.minecraft.world.PersistentStateManager;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Persistent world data that stores the boss cooldowns and toggles.
+ */
+public final class BossCooldownState extends PersistentState {
+    private static final String KEY = "boi_boss_state";
+
+    private final Map<String, Long> bossCooldowns = new HashMap<>();
+    private long globalCooldownUntil = 0L;
+    private boolean bossesEnabled = true;
+
+    public static BossCooldownState get(MinecraftServer server) {
+        net.minecraft.server.world.ServerWorld overworld = server.getOverworld();
+        PersistentStateManager manager = overworld.getPersistentStateManager();
+        return manager.getOrCreate(BossCooldownState::fromNbt, BossCooldownState::new, KEY);
+    }
+
+    public void resetAll() {
+        bossCooldowns.clear();
+        globalCooldownUntil = 0L;
+        markDirty();
+    }
+
+    public boolean canSummon(String bossId, long currentTime) {
+        if (!bossesEnabled) {
+            return false;
+        }
+        if (!BOIConfig.get().bosses.allowBossSpawns) {
+            return false;
+        }
+        if (!BOIConfig.get().bosses.altarSpawnsOnly) {
+            return false;
+        }
+        if (currentTime < globalCooldownUntil) {
+            return false;
+        }
+        long specific = bossCooldowns.getOrDefault(bossId, 0L);
+        return currentTime >= specific;
+    }
+
+    public void triggerCooldown(String bossId, long currentTime, long ticksPerDay) {
+        BOIConfig.Cooldowns cooldowns = BOIConfig.get().bosses.cooldowns;
+        long dayTicks = ticksPerDay;
+        globalCooldownUntil = currentTime + cooldowns.globalDays * dayTicks;
+        bossCooldowns.put(bossId, currentTime + cooldowns.perBossDays * dayTicks);
+        markDirty();
+    }
+
+    public void setBossesEnabled(boolean bossesEnabled) {
+        this.bossesEnabled = bossesEnabled;
+        markDirty();
+    }
+
+    public boolean areBossesEnabled() {
+        return bossesEnabled && BOIConfig.get().bosses.allowBossSpawns;
+    }
+
+    @Override
+    public NbtCompound writeNbt(NbtCompound nbt) {
+        nbt.putLong("Global", globalCooldownUntil);
+        NbtCompound bosses = new NbtCompound();
+        bossCooldowns.forEach(bosses::putLong);
+        nbt.put("Bosses", bosses);
+        nbt.putBoolean("Enabled", bossesEnabled);
+        return nbt;
+    }
+
+    private static BossCooldownState fromNbt(NbtCompound nbt) {
+        BossCooldownState state = new BossCooldownState();
+        state.globalCooldownUntil = nbt.getLong("Global");
+        state.bossesEnabled = nbt.getBoolean("Enabled");
+        NbtCompound bosses = nbt.getCompound("Bosses");
+        for (String key : bosses.getKeys()) {
+            state.bossCooldowns.put(key, bosses.getLong(key));
+        }
+        return state;
+    }
+}
diff --git a/src/main/java/net/liam/biomsofinfinity/world/feature/ModConfiguredFeatures.java b/src/main/java/net/liam/biomsofinfinity/world/feature/ModConfiguredFeatures.java
index 98f3d498635cf64cbed77571da7c423be394aff6..fdb27db9588ee6e4c12c175367960129c3960bf6 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/feature/ModConfiguredFeatures.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/feature/ModConfiguredFeatures.java
@@ -5,61 +5,95 @@ import net.liam.biomsofinfinity.block.ModBlocks;
 import net.minecraft.block.Blocks;
 import net.minecraft.registry.Registerable;
 import net.minecraft.registry.RegistryKey;
 import net.minecraft.registry.RegistryKeys;
 import net.minecraft.structure.rule.BlockMatchRuleTest;
 import net.minecraft.structure.rule.RuleTest;
 import net.minecraft.util.Identifier;
 import net.minecraft.util.math.intprovider.ConstantIntProvider;
 import net.minecraft.world.gen.feature.*;
 import net.minecraft.world.gen.feature.size.TwoLayersFeatureSize;
 import net.minecraft.world.gen.foliage.BlobFoliagePlacer;
 import net.minecraft.world.gen.stateprovider.SimpleBlockStateProvider;
 import net.minecraft.world.gen.trunk.StraightTrunkPlacer;
 
 public class ModConfiguredFeatures {
 
     // Nebelgranit-Adern in Nebelwipfel
     public static final RegistryKey<ConfiguredFeature<?, ?>> MIST_GRANITE_ORE_KEY = registerKey("mist_granite_ore");
 
     // Leuchtende Moosblöcke in beiden Biomen
     public static final RegistryKey<ConfiguredFeature<?, ?>> GLOWING_MOSS_PATCH_KEY = registerKey("glowing_moss_patch");
 
     // Ethereal Log Bäume im Kristallhain
     public static final RegistryKey<ConfiguredFeature<?, ?>> ETHEREAL_TREE_KEY = registerKey("ethereal_tree");
 
+    // Glowshroom Forest
+    public static final RegistryKey<ConfiguredFeature<?, ?>> GLOWSHROOM_PATCH_KEY = registerKey("glowshroom_patch");
+    public static final RegistryKey<ConfiguredFeature<?, ?>> LUMINOUS_FIBER_PATCH_KEY = registerKey("luminous_fiber_patch");
+
+    // Shadow Isles
+    public static final RegistryKey<ConfiguredFeature<?, ?>> SHADOW_BRAMBLE_PATCH_KEY = registerKey("shadow_bramble_patch");
+
+    // Light Crypt
+    public static final RegistryKey<ConfiguredFeature<?, ?>> RADIANT_PYLON_COLUMN_KEY = registerKey("radiant_pylon_column");
+    public static final RegistryKey<ConfiguredFeature<?, ?>> AURORA_CRYSTAL_CLUSTER_KEY = registerKey("aurora_crystal_cluster");
+
     public static void bootstrap(Registerable<ConfiguredFeature<?, ?>> context) {
 
         // Erstelle RuleTest für Stein-Ersetzung
         RuleTest stoneReplaceables = new BlockMatchRuleTest(Blocks.STONE);
 
         // Nebelgranit spawnt als Erzadern in Nebelwipfel (ersetzt Stein)
         register(context, MIST_GRANITE_ORE_KEY, Feature.ORE, new OreFeatureConfig(
             stoneReplaceables,
             ModBlocks.MIST_GRANITE.getDefaultState(),
             32)); // Größere Adern für mystische Felsen
 
         // Leuchtende Moosblöcke als Patches - vereinfachte Version
         register(context, GLOWING_MOSS_PATCH_KEY, Feature.RANDOM_PATCH,
             new RandomPatchFeatureConfig(4, 4, 3,
                 PlacedFeatures.createEntry(Feature.SIMPLE_BLOCK,
                     new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(ModBlocks.GLOWING_MOSS_BLOCK.getDefaultState())))));
 
         // Ethereal Trees mit Ethereal Log
         register(context, ETHEREAL_TREE_KEY, Feature.TREE, new TreeFeatureConfig.Builder(
             SimpleBlockStateProvider.of(ModBlocks.ETHEREAL_LOG.getDefaultState()),
             new StraightTrunkPlacer(4, 2, 0),
             SimpleBlockStateProvider.of(Blocks.END_STONE.getDefaultState()), // Kristalline Blätter
             new BlobFoliagePlacer(ConstantIntProvider.create(2),
                                   ConstantIntProvider.create(0), 3),
             new TwoLayersFeatureSize(1, 0, 1)).build());
+
+        register(context, GLOWSHROOM_PATCH_KEY, Feature.RANDOM_PATCH,
+                new RandomPatchFeatureConfig(32, 6, 3,
+                        PlacedFeatures.createEntry(Feature.SIMPLE_BLOCK,
+                                new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(ModBlocks.GLOWSHROOM_PLANT.getDefaultState())))));
+
+        register(context, LUMINOUS_FIBER_PATCH_KEY, Feature.RANDOM_PATCH,
+                new RandomPatchFeatureConfig(10, 4, 2,
+                        PlacedFeatures.createEntry(Feature.SIMPLE_BLOCK,
+                                new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(ModBlocks.LUMINOUS_FIBER_BLOCK.getDefaultState())))));
+
+        register(context, SHADOW_BRAMBLE_PATCH_KEY, Feature.RANDOM_PATCH,
+                new RandomPatchFeatureConfig(20, 4, 2,
+                        PlacedFeatures.createEntry(Feature.SIMPLE_BLOCK,
+                                new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(ModBlocks.OBSIDIAN_BRAMBLE.getDefaultState())))));
+
+        register(context, RADIANT_PYLON_COLUMN_KEY, Feature.SIMPLE_BLOCK,
+                new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(ModBlocks.RADIANT_PYLON.getDefaultState())));
+
+        register(context, AURORA_CRYSTAL_CLUSTER_KEY, Feature.RANDOM_PATCH,
+                new RandomPatchFeatureConfig(8, 3, 2,
+                        PlacedFeatures.createEntry(Feature.SIMPLE_BLOCK,
+                                new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(ModBlocks.AURORA_GLASS.getDefaultState())))));
     }
 
     public static RegistryKey<ConfiguredFeature<?, ?>> registerKey(String name) {
         return RegistryKey.of(RegistryKeys.CONFIGURED_FEATURE, Identifier.of(Biomsofinfinity.MOD_ID, name));
     }
 
     private static <FC extends FeatureConfig, F extends Feature<FC>> void register(Registerable<ConfiguredFeature<?, ?>> context,
                                                                                    RegistryKey<ConfiguredFeature<?, ?>> key, F feature, FC configuration) {
         context.register(key, new ConfiguredFeature<>(feature, configuration));
     }
 }
diff --git a/src/main/java/net/liam/biomsofinfinity/world/feature/ModPlacedFeatures.java b/src/main/java/net/liam/biomsofinfinity/world/feature/ModPlacedFeatures.java
index 1fb31331f896aa9e8e5c887d89ff4fee88364409..c7711fb1bec40c88ddb40b5f0b15440ce561d820 100644
--- a/src/main/java/net/liam/biomsofinfinity/world/feature/ModPlacedFeatures.java
+++ b/src/main/java/net/liam/biomsofinfinity/world/feature/ModPlacedFeatures.java
@@ -1,61 +1,81 @@
 package net.liam.biomsofinfinity.world.feature;
 
 import net.liam.biomsofinfinity.Biomsofinfinity;
 import net.minecraft.registry.Registerable;
 import net.minecraft.registry.RegistryKey;
 import net.minecraft.registry.RegistryKeys;
 import net.minecraft.util.Identifier;
 import net.minecraft.world.Heightmap;
 import net.minecraft.world.gen.YOffset;
 import net.minecraft.world.gen.feature.PlacedFeature;
 import net.minecraft.world.gen.placementmodifier.*;
 
 import java.util.List;
 
 public class ModPlacedFeatures {
 
     // PlacedFeature Keys für die Weltgenerierung
     public static final RegistryKey<PlacedFeature> MIST_GRANITE_ORE_PLACED_KEY = registerKey("mist_granite_ore_placed");
     public static final RegistryKey<PlacedFeature> GLOWING_MOSS_PATCH_PLACED_KEY = registerKey("glowing_moss_patch_placed");
     public static final RegistryKey<PlacedFeature> ETHEREAL_TREE_PLACED_KEY = registerKey("ethereal_tree_placed");
+    public static final RegistryKey<PlacedFeature> GLOWSHROOM_PATCH_PLACED_KEY = registerKey("glowshroom_patch_placed");
+    public static final RegistryKey<PlacedFeature> LUMINOUS_FIBER_PATCH_PLACED_KEY = registerKey("luminous_fiber_patch_placed");
+    public static final RegistryKey<PlacedFeature> SHADOW_BRAMBLE_PATCH_PLACED_KEY = registerKey("shadow_bramble_patch_placed");
+    public static final RegistryKey<PlacedFeature> RADIANT_PYLON_PLACED_KEY = registerKey("radiant_pylon_placed");
+    public static final RegistryKey<PlacedFeature> AURORA_CRYSTAL_CLUSTER_PLACED_KEY = registerKey("aurora_crystal_cluster_placed");
 
     public static void bootstrap(Registerable<PlacedFeature> context) {
         var configuredFeatureRegistryEntryLookup = context.getRegistryLookup(RegistryKeys.CONFIGURED_FEATURE);
 
         // Nebelgranit-Adern spawnen häufig in Nebelwipfel (Underground)
         register(context, MIST_GRANITE_ORE_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.MIST_GRANITE_ORE_KEY),
             List.of(
                 CountPlacementModifier.of(20), // Häufig spawnen für mystisches Gebirge
                 SquarePlacementModifier.of(),
                 HeightRangePlacementModifier.uniform(YOffset.fixed(0), YOffset.fixed(64))
             ));
 
         // Leuchtende Moosblöcke spawnen auf der Oberfläche beider Biome
         register(context, GLOWING_MOSS_PATCH_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.GLOWING_MOSS_PATCH_KEY),
             List.of(
                 CountPlacementModifier.of(8), // Moderate Häufigkeit
                 SquarePlacementModifier.of(),
                 HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING), // Auf der Oberfläche
                 BiomePlacementModifier.of()
             ));
 
         // Ethereal Trees spawnen selten aber markant im Kristallhain
         register(context, ETHEREAL_TREE_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.ETHEREAL_TREE_KEY),
             List.of(
                 CountPlacementModifier.of(3), // Seltener für besondere Bäume
                 SquarePlacementModifier.of(),
                 HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING),
                 BiomePlacementModifier.of()
             ));
+
+        register(context, GLOWSHROOM_PATCH_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.GLOWSHROOM_PATCH_KEY),
+                List.of(CountPlacementModifier.of(7), SquarePlacementModifier.of(), HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING), BiomePlacementModifier.of()));
+
+        register(context, LUMINOUS_FIBER_PATCH_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.LUMINOUS_FIBER_PATCH_KEY),
+                List.of(CountPlacementModifier.of(4), SquarePlacementModifier.of(), HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING), BiomePlacementModifier.of()));
+
+        register(context, SHADOW_BRAMBLE_PATCH_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.SHADOW_BRAMBLE_PATCH_KEY),
+                List.of(CountPlacementModifier.of(6), SquarePlacementModifier.of(), HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING), BiomePlacementModifier.of()));
+
+        register(context, RADIANT_PYLON_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.RADIANT_PYLON_COLUMN_KEY),
+                List.of(CountPlacementModifier.of(2), SquarePlacementModifier.of(), HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING), BiomePlacementModifier.of()));
+
+        register(context, AURORA_CRYSTAL_CLUSTER_PLACED_KEY, configuredFeatureRegistryEntryLookup.getOrThrow(ModConfiguredFeatures.AURORA_CRYSTAL_CLUSTER_KEY),
+                List.of(CountPlacementModifier.of(5), SquarePlacementModifier.of(), HeightmapPlacementModifier.of(Heightmap.Type.MOTION_BLOCKING), BiomePlacementModifier.of()));
     }
 
     public static RegistryKey<PlacedFeature> registerKey(String name) {
         return RegistryKey.of(RegistryKeys.PLACED_FEATURE, Identifier.of(Biomsofinfinity.MOD_ID, name));
     }
 
     private static void register(Registerable<PlacedFeature> context, RegistryKey<PlacedFeature> key,
                                 net.minecraft.registry.entry.RegistryEntry<net.minecraft.world.gen.feature.ConfiguredFeature<?, ?>> configuration,
                                 List<PlacementModifier> modifiers) {
         context.register(key, new PlacedFeature(configuration, List.copyOf(modifiers)));
     }
 }
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/aurora_glass.json b/src/main/resources/assets/bioms-of-infinity/blockstates/aurora_glass.json
new file mode 100644
index 0000000000000000000000000000000000000000..335a82bab0da68ab69e43a37d309c5c2dfba0b58
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/aurora_glass.json
@@ -0,0 +1,5 @@
+{
+  "variants": {
+    "": { "model": "bioms-of-infinity:block/aurora_glass" }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/glowshroom_plant.json b/src/main/resources/assets/bioms-of-infinity/blockstates/glowshroom_plant.json
new file mode 100644
index 0000000000000000000000000000000000000000..be806d128a49acdb602ef53f6386e3e108f91e63
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/glowshroom_plant.json
@@ -0,0 +1,5 @@
+{
+  "variants": {
+    "": { "model": "bioms-of-infinity:block/glowshroom_plant" }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/luminous_fiber_block.json b/src/main/resources/assets/bioms-of-infinity/blockstates/luminous_fiber_block.json
new file mode 100644
index 0000000000000000000000000000000000000000..19a26455ee4e6a8c29b39aa778851a74b84ce6a0
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/luminous_fiber_block.json
@@ -0,0 +1,5 @@
+{
+  "variants": {
+    "": { "model": "bioms-of-infinity:block/luminous_fiber_block" }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/obsidian_bramble.json b/src/main/resources/assets/bioms-of-infinity/blockstates/obsidian_bramble.json
new file mode 100644
index 0000000000000000000000000000000000000000..033f6bfafa969473599014e11f8b95636427dd25
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/obsidian_bramble.json
@@ -0,0 +1,5 @@
+{
+  "variants": {
+    "": { "model": "bioms-of-infinity:block/obsidian_bramble" }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/radiant_pylon.json b/src/main/resources/assets/bioms-of-infinity/blockstates/radiant_pylon.json
new file mode 100644
index 0000000000000000000000000000000000000000..79833342c8310c70e62fb88d0d42faa2681f827c
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/radiant_pylon.json
@@ -0,0 +1,7 @@
+{
+  "variants": {
+    "axis=x": { "model": "bioms-of-infinity:block/radiant_pylon_horizontal", "x": 90, "y": 90 },
+    "axis=y": { "model": "bioms-of-infinity:block/radiant_pylon" },
+    "axis=z": { "model": "bioms-of-infinity:block/radiant_pylon_horizontal", "x": 90 }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/shadow_altar.json b/src/main/resources/assets/bioms-of-infinity/blockstates/shadow_altar.json
new file mode 100644
index 0000000000000000000000000000000000000000..e44269f984d8457757e0b87a56a9c06f6e7cd1b7
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/shadow_altar.json
@@ -0,0 +1,5 @@
+{
+  "variants": {
+    "": { "model": "bioms-of-infinity:block/shadow_altar" }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/blockstates/shadow_slate.json b/src/main/resources/assets/bioms-of-infinity/blockstates/shadow_slate.json
new file mode 100644
index 0000000000000000000000000000000000000000..bd27737c079ed8cb2e99af7a2c138bdc2fce76ac
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/blockstates/shadow_slate.json
@@ -0,0 +1,5 @@
+{
+  "variants": {
+    "": { "model": "bioms-of-infinity:block/shadow_slate" }
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/lang/en_us.json b/src/main/resources/assets/bioms-of-infinity/lang/en_us.json
index 741dd9ab4f59d1fff605f1736a81af732f32e3d5..cd6ba99c021385304d7328de5255c32956ed0ce3 100644
--- a/src/main/resources/assets/bioms-of-infinity/lang/en_us.json
+++ b/src/main/resources/assets/bioms-of-infinity/lang/en_us.json
@@ -13,27 +13,68 @@
   "block.bioms-of-infinity.spore_moss": "Spore Moss",
   "block.bioms-of-infinity.crystal_cluster": "Crystal Cluster",
   "block.bioms-of-infinity.large_crystal_shard": "Large Crystal Shard",
   "block.bioms-of-infinity.prismatic_crystal_ore": "Prismatic Crystal Ore",
 
   "item.bioms-of-infinity.mist_glimmer": "Mist Glimmer",
   "item.bioms-of-infinity.mist_crystal": "Mist Crystal",
   "item.bioms-of-infinity.ghost_essence": "Ghost Essence",
   "item.bioms-of-infinity.prismatic_crystal": "Prismatic Crystal",
   "item.bioms-of-infinity.crystal_shard": "Crystal Shard",
   "item.bioms-of-infinity.chromatic_dust": "Chromatic Dust",
   "item.bioms-of-infinity.crystal_sword": "Crystal Sword",
   "item.bioms-of-infinity.mist_pickaxe": "Mist Pickaxe",
 
   "item.bioms-of-infinity.mist_crystal.tooltip": "A mystical crystal from the Mist Peaks",
   "item.bioms-of-infinity.mist_crystal.tooltip2": "Appears only at dawn in stone veins",
   "item.bioms-of-infinity.prismatic_crystal.tooltip": "A shimmering crystal full of magical energy",
   "item.bioms-of-infinity.prismatic_crystal.tooltip2": "Refracts light into beautiful spectrums",
 
   "entity.bioms-of-infinity.mist_spirit": "Mist Spirit",
   "entity.bioms-of-infinity.mist_wolf": "Mist Wolf",
   "entity.bioms-of-infinity.crystal_golem": "Crystal Golem",
   "entity.bioms-of-infinity.crystal_spider": "Crystal Spider",
 
   "biome.bioms-of-infinity.mist_peaks": "Mist Peaks",
-  "biome.bioms-of-infinity.crystal_grove": "Crystal Grove"
+  "biome.bioms-of-infinity.crystal_grove": "Crystal Grove",
+  "block.bioms-of-infinity.luminous_fiber_block": "Luminous Fiber Block",
+  "block.bioms-of-infinity.glowshroom_plant": "Glowshroom",
+  "block.bioms-of-infinity.shadow_slate": "Shadow Slate",
+  "block.bioms-of-infinity.shadow_altar": "Shadow Altar",
+  "block.bioms-of-infinity.obsidian_bramble": "Obsidian Bramble",
+  "block.bioms-of-infinity.aurora_glass": "Aurora Glass",
+  "block.bioms-of-infinity.radiant_pylon": "Radiant Pylon",
+  "item.bioms-of-infinity.glowshroom_essence": "Glowshroom Essence",
+  "item.bioms-of-infinity.luminous_fiber": "Luminous Fiber",
+  "item.bioms-of-infinity.shadow_heart": "Shadow Heart",
+  "item.bioms-of-infinity.dark_veil": "Dark Veil",
+  "item.bioms-of-infinity.shadow_crown": "Shadow Crown",
+  "item.bioms-of-infinity.aurora_flare": "Aurora Flare",
+  "item.bioms-of-infinity.bright_shard": "Bright Shard",
+  "item.bioms-of-infinity.glowshroom_essence.tooltip": "Brew into potions for clarity in the dark.",
+  "item.bioms-of-infinity.luminous_fiber.tooltip": "A radiant filament used in crafting lighttech.",
+  "item.bioms-of-infinity.shadow_heart.tooltip": "An altar key pulsing with shadow power.",
+  "item.bioms-of-infinity.dark_veil.tooltip": "Consume to vanish briefly in the gloom.",
+  "item.bioms-of-infinity.aurora_flare.tooltip": "Ignites a radiant pulse granting night vision.",
+  "item.bioms-of-infinity.shadow_crown.tooltip": "Trophy of the Shadow King, enhances stealth gear.",
+  "item.bioms-of-infinity.bright_shard.tooltip": "Refines into beacons for the Light Crypt.",
+  "entity.bioms-of-infinity.shadow_king": "Shadow King",
+  "biome.bioms-of-infinity.glowshroom_forest": "Glowshroom Forest",
+  "biome.bioms-of-infinity.shadow_isles": "Shadow Isles",
+  "biome.bioms-of-infinity.light_crypt": "Light Crypt",
+  "commands.boi.boss.enabled": "Boss encounters enabled.",
+  "commands.boi.boss.disabled": "Boss encounters disabled.",
+  "commands.boi.boss.reset": "All Bioms of Infinity boss cooldowns reset.",
+  "commands.boi.config.reload": "Bioms of Infinity config reloaded.",
+  "message.boi.boss.disabled": "The rituals are dormant. Enable boss encounters first.",
+  "message.boi.boss.cooldown": "The altar is recharging. Return after the void calms.",
+  "message.boi.boss.wrong_biome": "This altar only awakens within the Shadow Isles.",
+  "message.boi.boss.too_many": "Another boss is already active in this world.",
+  "message.boi.boss.shadow_king.summoned": "The Shadow King rises from the abyss!",
+  "message.boi.boss.shadow_king.taunt": "The Shadow King senses your ambition...",
+  "advancement.biomsofinfinity.root.title": "Bioms of Infinity",
+  "advancement.biomsofinfinity.root.description": "Step into the renewed End.",
+  "advancement.biomsofinfinity.shadow_altar.title": "Eclipsed Gateway",
+  "advancement.biomsofinfinity.shadow_altar.description": "Construct a Shadow Altar to beckon the king.",
+  "advancement.biomsofinfinity.shadow_crown.title": "Crown of Silence",
+  "advancement.biomsofinfinity.shadow_crown.description": "Defeat the Shadow King and claim his crown."
 }
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/aurora_glass.json b/src/main/resources/assets/bioms-of-infinity/models/block/aurora_glass.json
new file mode 100644
index 0000000000000000000000000000000000000000..6e17f087a6859c731bf7b30dec6df76f6bf1aea8
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/aurora_glass.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cube_all",
+  "textures": {
+    "all": "bioms-of-infinity:block/aurora_glass"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/glowshroom_plant.json b/src/main/resources/assets/bioms-of-infinity/models/block/glowshroom_plant.json
new file mode 100644
index 0000000000000000000000000000000000000000..116024c229994c519216b197c64eb2f54b1bf1a3
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/glowshroom_plant.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cross",
+  "textures": {
+    "cross": "bioms-of-infinity:block/glowshroom_plant"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/luminous_fiber_block.json b/src/main/resources/assets/bioms-of-infinity/models/block/luminous_fiber_block.json
new file mode 100644
index 0000000000000000000000000000000000000000..dc55aecdc1a81153d3a8f3347a4874ed55c70a76
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/luminous_fiber_block.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cube_all",
+  "textures": {
+    "all": "bioms-of-infinity:block/luminous_fiber_block"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/obsidian_bramble.json b/src/main/resources/assets/bioms-of-infinity/models/block/obsidian_bramble.json
new file mode 100644
index 0000000000000000000000000000000000000000..6b31ae045fd73194bfcfcc710c9062efac92b412
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/obsidian_bramble.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cross",
+  "textures": {
+    "cross": "bioms-of-infinity:block/obsidian_bramble"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/radiant_pylon.json b/src/main/resources/assets/bioms-of-infinity/models/block/radiant_pylon.json
new file mode 100644
index 0000000000000000000000000000000000000000..645728c252a4cfb1917d51b33e6900288578a695
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/radiant_pylon.json
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/cube_column",
+  "textures": {
+    "end": "bioms-of-infinity:block/radiant_pylon",
+    "side": "bioms-of-infinity:block/radiant_pylon"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/radiant_pylon_horizontal.json b/src/main/resources/assets/bioms-of-infinity/models/block/radiant_pylon_horizontal.json
new file mode 100644
index 0000000000000000000000000000000000000000..d747eea805bffc14de86e770e1d2760045b46560
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/radiant_pylon_horizontal.json
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/cube_column_horizontal",
+  "textures": {
+    "end": "bioms-of-infinity:block/radiant_pylon",
+    "side": "bioms-of-infinity:block/radiant_pylon"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/shadow_altar.json b/src/main/resources/assets/bioms-of-infinity/models/block/shadow_altar.json
new file mode 100644
index 0000000000000000000000000000000000000000..0ec4772b588269e8905e77add776483aad503a2a
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/shadow_altar.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cube_all",
+  "textures": {
+    "all": "bioms-of-infinity:block/shadow_altar"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/block/shadow_slate.json b/src/main/resources/assets/bioms-of-infinity/models/block/shadow_slate.json
new file mode 100644
index 0000000000000000000000000000000000000000..0fc85294b605e989bb24d40adeb7b3aa1c480f9c
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/block/shadow_slate.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cube_all",
+  "textures": {
+    "all": "bioms-of-infinity:block/shadow_slate"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/aurora_flare.json b/src/main/resources/assets/bioms-of-infinity/models/item/aurora_flare.json
new file mode 100644
index 0000000000000000000000000000000000000000..b8fb2946a9481dba6e35699d1c6d95a828f52eeb
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/aurora_flare.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/aurora_flare"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/aurora_glass.json b/src/main/resources/assets/bioms-of-infinity/models/item/aurora_glass.json
new file mode 100644
index 0000000000000000000000000000000000000000..256a358637fef2695c1f9f560914d4028764870e
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/aurora_glass.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/aurora_glass"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/bright_shard.json b/src/main/resources/assets/bioms-of-infinity/models/item/bright_shard.json
new file mode 100644
index 0000000000000000000000000000000000000000..b69b73d55821813f3b5d6ec22716eda6eb682707
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/bright_shard.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/bright_shard"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/dark_veil.json b/src/main/resources/assets/bioms-of-infinity/models/item/dark_veil.json
new file mode 100644
index 0000000000000000000000000000000000000000..ae6db3f916655d0151c639796d1add90d06b9292
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/dark_veil.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/dark_veil"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/glowshroom_essence.json b/src/main/resources/assets/bioms-of-infinity/models/item/glowshroom_essence.json
new file mode 100644
index 0000000000000000000000000000000000000000..8eeb85b07aa1b4719c219c927df82c62e98fcb9a
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/glowshroom_essence.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/glowshroom_essence"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/glowshroom_plant.json b/src/main/resources/assets/bioms-of-infinity/models/item/glowshroom_plant.json
new file mode 100644
index 0000000000000000000000000000000000000000..ce934a3b103c635ff1beae5b80fb58b345caf867
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/glowshroom_plant.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/glowshroom_plant"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/luminous_fiber.json b/src/main/resources/assets/bioms-of-infinity/models/item/luminous_fiber.json
new file mode 100644
index 0000000000000000000000000000000000000000..b47b26247ec706ce175136ed9c328620a3af0daf
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/luminous_fiber.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/luminous_fiber"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/luminous_fiber_block.json b/src/main/resources/assets/bioms-of-infinity/models/item/luminous_fiber_block.json
new file mode 100644
index 0000000000000000000000000000000000000000..ecee054df8e9864bf2d4ddc93adaa3be8eeacb99
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/luminous_fiber_block.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/luminous_fiber_block"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/obsidian_bramble.json b/src/main/resources/assets/bioms-of-infinity/models/item/obsidian_bramble.json
new file mode 100644
index 0000000000000000000000000000000000000000..3f64e6235ca4523308f316f0ea4df8491fb57d55
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/obsidian_bramble.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/obsidian_bramble"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/radiant_pylon.json b/src/main/resources/assets/bioms-of-infinity/models/item/radiant_pylon.json
new file mode 100644
index 0000000000000000000000000000000000000000..e4328fc9e35fecd6127e6cc6ec9f7b611450241a
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/radiant_pylon.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/radiant_pylon"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/shadow_altar.json b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_altar.json
new file mode 100644
index 0000000000000000000000000000000000000000..14d8f4d902bf8b2afb885dc0990c0261fe2beda0
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_altar.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/shadow_altar"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/shadow_crown.json b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_crown.json
new file mode 100644
index 0000000000000000000000000000000000000000..d5f8998512ffa17ce6e675fa31a9ae2b0b9ed665
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_crown.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/shadow_crown"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/shadow_heart.json b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_heart.json
new file mode 100644
index 0000000000000000000000000000000000000000..a0962b076c7d835f90a287f7c13f622edbcfefeb
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_heart.json
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:item/generated",
+  "textures": {
+    "layer0": "bioms-of-infinity:item/shadow_heart"
+  }
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/models/item/shadow_slate.json b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_slate.json
new file mode 100644
index 0000000000000000000000000000000000000000..134542710ef4249fa24068ad6f030e2adddcf0aa
--- /dev/null
+++ b/src/main/resources/assets/bioms-of-infinity/models/item/shadow_slate.json
@@ -0,0 +1,3 @@
+{
+  "parent": "bioms-of-infinity:block/shadow_slate"
+}
diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/aurora_glass.png b/src/main/resources/assets/bioms-of-infinity/textures/block/aurora_glass.png
new file mode 100644
index 0000000000000000000000000000000000000000..49b9c4b7e9f1a2b3eeef146c309ce4ec670f090c
GIT binary patch
literal 1124
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEVA1w;aSW-L^LBQwPiU&lf%@;R
zni8F7E~>CLzF{g_Z_csR+B5LRCc}NHvlAnN)pNF-dKtS_<W;k3^wupo-P4w=<=-LN
zl6TX=(>P8@<f%}8(}~kA%Ce0I_D;Xd{!Fx--|R`uJkxpiw?ChExPJfh?ZpY@)fY6o
z78!IKGKqwCUK2Rnt?j5E<z!;ikimHI1jFQ54Q<VY;7Rh^f3L5$yFE#$<i4%&b;;~M
zC(lNmzPHBoMttY-z;MO`D=+15NLTyt?ppfBbhUuOJps36eS{yUh@YGPvy)dke)+dM
zoRcoc{eACP{A^P73loO9xzm5-oIjm&?&R`4PqM$s=qM`~bR2AquGwMS`(T2)f%>wH
zZJjR{{9@_h;Wsq0Iq~bu+AH&P=YG0ybYkI``!AL~*<EAy{E4uD1dD@1f`Fvu@1GxU
z_b*djtGbF&FYI4W>DA9IZL?pzetY1l%-l;Ceyy5(#CCJvx^HeuKK}R1buWqdhwpy;
zu-DY>tLO^LU?2C-tXil0KYl+eCsQgK5w^sxV8Urjue@tfcl6ZnhW~%^_`NjHcNKS+
zYj9c3^^>mV{lH~l_H5bq%`^Wfi#L2+{_xMuARX<Xi!Z<Q^zOX)ns>)tJ)X8|d%KV2
z4j(7}onu!w!&Pu&Oy;ViDcdUFW#_L-Eqr2h|6LYW#a<>~@p|Q&mqq8TZq0J3z3Ry@
zug7=EzF*=AHa;Ofi(UnsJ{1xrdv!_rn@2Ai@ACXDmTmwBl8kMJx^43IXVR4sd*(IF
zitq09j(8sV+xF4<<b#SO<tCqQonx-qnJ;ZG@{T#-`0e<We7wBIg<F@(c_(rGt&M$>
zs-8UOb^B?{Q*FJLGlZ}I&ae)4U#`)mw4di}QVPRGrbQDOUAQ~k*aUPHq$C}-G-Oai
z@FUlUpX|{;_O3ax`QFrxa}N36|FVX^{uA5Or^gw-Za!3b^W>iGwWhg!Qu0~Z?cofQ
zZ@NW4-tlMdLdGv_%DTMY{Q|d|ga{`4ev&HrKIg$beZP%o>pGhL<N#G4S7H3eu;6Kt
z>c?&35|VO<UdkMNTV!Nqb7aqh<MI|JI;VW%{ded0m>zpQ=fR>Asb5Ot9Ro#Xy*e+L
z>$~WG8o#V>>5H#yi;}MLyZb!}@|E<Sx9QiR@Zvp8FG{SOrn_9eebZ<4;#pgK^FLny
znr#xl?nr`xP;#wb>4m$S4{>q*WBh#MqhI6sr&}GqZrE}%XYtj*voB7_%6;WOlCm){
zWJ3Evi}vZ;_OG|gI28HtzwoMhHeWGmQFSiP?jB|Z6PsE0vUP#!Sxv<x$&IzPH>+W3
z;p&1bVFJ0aygmEHK8x$5{A+48)-o49vH8#<RTpLE4l#kVYxoz;e*53<zrN{GA9oYS
S^Iw6b2ZN`ppUXO@geCx*dk-l9

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/glowshroom_plant.png b/src/main/resources/assets/bioms-of-infinity/textures/block/glowshroom_plant.png
new file mode 100644
index 0000000000000000000000000000000000000000..f2f165343b8d2db439617f3428fe55f7fb896e30
GIT binary patch
literal 1086
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU}5!iaSW-L^LBQv&y`Y{<MI1<
zKUVypCV8SF%FB4BO~uKUJxda{rLMD&S*O0}V$}{`spwmmZp!E0jAD+tw&~7{X+IiP
z=NL}UTjNo6hp|`c;|gDohZP+@t%3yy*4s}q{w=HW!P?$*-}?RUzVE$X`|aPpZ@=&6
zZ{O>GximIiE}8j8pt7uU+jZlEO0rH;st#5SCSDEukIHL%X;y1BJD<1uS#X+-?Uz;U
z`?ved54~T|=70aWL!A}-{K&(Ne@g1C0@)69hR<KJ^_BAd%J)y#E_roUci-dl<@Wxs
z#gCu4aeB>$zr_m|e>3(AuRkQb^nTJt)`xZ>M^0X!_iW;Jt>rS8-mP2m@JF58-C)-h
zwoMNkyJe~$GQR14+~Hk%>28qwrCse3vQh_<wm!_<_3Oq*ldBul>fIB{%4H?iHOx}p
zeWK{?ktA-WgsaP#aum%M`uF%-E_vp`Y1yjUa!Z+kW2^gw;E0~z34(<y{i>q&u^+hn
zLha&C#`hlt9^VsGJGQ5XmtSz7h808fZabcEhyOR##Pq#C%d)rMycrT>_;$j-Z(@t4
z-!D8H_2pCOm+j`lQ)iqxx^DA=*Cl2(?oG<w2kZFv=GrfaTytbiMD97iv`)tZM}EwB
zU;6f<`H!EgAM?b$IQZ4^^%=F-R<o8hF58&lDI|Vw?y}uGr}f-f8}rWAKYX!t_f@y1
z$L}ojlk_C=8fObnyI8)Av7zVqwoeI#tkZYb&n)wJa!K^dwyW`*uU!uFPf0Rj__)%~
z=Iqv<-an27Gv@v<QJ?2#K5v=SBiYEbx2a(gEEZ<Fe(d^^3iKPpmHIz?v#wgbop5H4
zxaHSxW^Qcyj0QFZ6JOchK6&Ogn?ua3$;T$Ax~MH<C^)^=^H1GBp62~!f`YrRT;V+{
za#(l5CcFOoR#7+pS4eR$O7e`G-+r{}>z2az8tt*!wZ}hdzgPObQwf+XH1$s$l#)5r
zQa<HNJ9p%!Dp`h&n&n07{&~wt$JW<+T;}NSQA{~_h#~*|{fi~B*RS?3tn3j|kad8i
zv=WBQDGV<eE@?1cVq6l)w1nAXF^dQL1UJqJd<wm!DQs?-SyKJ~p7gy^e~G8FHv?Vv
za6`84-Ls{PJ-KphjFa!iC7jC3Z<?Ps-&AA9oxN9|?5pnjz3u(dO-mFSHl97azF}us
z_2NA5r<0c38g%*|yC7_``1b9<aMv$y`y8H_$~HILEUP}gckz_`b8hbHDm9AV_ixd^
zaMSmo2E+fm_wv8(Z8|FEGA(=geaFf78ULIAv19vx`fl9jkJ<^FZqI(O;}Yk-OK*Am
udv;E|na8n8TL+feKF2kf-T!a*Up?<>{!AeW4+UVkz~JfX=d#Wzp$PyNrwgP2

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/luminous_fiber_block.png b/src/main/resources/assets/bioms-of-infinity/textures/block/luminous_fiber_block.png
new file mode 100644
index 0000000000000000000000000000000000000000..ffd2a4ac987ed51e6b084fd3e562049865efda82
GIT binary patch
literal 855
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEV3zZAaSW-L^LDnkhe)AJ!~UDG
z;b*o8t=#IIf2KyS>D{hnk)2*;?*wG`sALG*^4Z$7RCaLb2nDU^7ARTa?8q7z#@71&
z&?y6B<4EUMLPuw<Gn3t<dUqj5+8@<_`)}KP+b)0q+#910@xIqf=T`PGFZjB7OB>HT
z*M!N_Cb+Rq5Cakhw<32WZG3pr`1}8TbKiF@T9tEr%j4sx%O}3?`t>@-(`Pr+oO2#*
zzpH-QS#mb4d;Np`SD}^i*(z>tgRf!{^Cx=xhg&n$o}a%_PxbDZkJA#e7~Wq?ikkI~
z;lia7b|BOEcy!ZBMw{rajQR@xhCcW2C$%(8iub7g31&E(#(nqkWMSbOvVEDylcyg^
z+<a5wBR`{ntZ??EWu<?D8=joexg~dpwJz?Fw9)26=RS%}yATj;s%}?1qe^UsXF<)J
zPm_8VzUA@Pt6t?__@YEs{rlTx8^5VAxSx;bsm{$S)Z{e{jj6koJ8{#_j9u$qze>!I
zTg>Fa?LloqSZu+vMLo-2hdbZiU1V%g{>35V_nV1-@9Zz+ow4s*`Q&Uy(WR^*dG~!P
zPaeC_b@Bh)4Gfub^6Qs9VUFLQP;OCi^QM&5zfGG(%l+bREZ|r^`Byam&VtX3?b)v_
zi&tE7%KdD>_hAcjgZNwBA6?r%>Ix`Wm>qL5II-QKVaL+b|13&!i=+-WGhdUK?Q_HG
zpsA<kkNbOFub1wMp8w$7$;X%56RUR5PuhIj(=0;9a`LxlYC@Oqg#DQ17s23rIb!OJ
zBfrhpzkHdM{QO>X&yV(six->jzB@2?cD{v%g`J;kCgTgMiyONw!pcu(l?NNdXwI7U
zcJcDfy&EqEis|$y+TK3CH2A88l9Gmf*`b09>)$u*Y<qY<Vb}5FZ?${Zc>1v>q$UYD
z|E;Z&`L?;{>8nW5EmDUWRz}9{k~4q&?O%-knoOyW>sTJea&Fc#mtL{;&?TWuD;O>@
jT{`od;a1K6-+%ZG*Ik^fEE?Pe%rFd|u6{1-oD!M<uoH(0

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/obsidian_bramble.png b/src/main/resources/assets/bioms-of-infinity/textures/block/obsidian_bramble.png
new file mode 100644
index 0000000000000000000000000000000000000000..da392a3728ccabbf638b3ebbfcc083204181c673
GIT binary patch
literal 921
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU{3IKaSW-L^LF;_{L5)F4(Fd|
zCq2KkY)eaYqV$5sW546RUH5mg$rYL_Q4$=zXw$ldjdzldPtWJiy{wp?li^vH{PW!G
zw-#1*pHwH-g+*nbm3quzbL*eqE$5c`_v`vqbrpL#6?7HO-eNC!w)Tzd@;&{20U9Q=
z&VKTJ^^cEXy_LVFbtps8+#=l_-bb?qmO9_->${L4(v|j=aoy9+_bZPbUYj3Y?lRv)
z@j%9}d3iOb=KeCjaZ2&B=JCJc7Sr5c<Sp26W34@-f}gw0_xONJ6AQ_Ihvwc&mN}g+
zF#n>QY|-jpUr+JB2-b{Ydass$gLD6Zu;;lsPd5nPd3^WBjt!gNw=580h@3Ye{?C#X
zKcaJ{<>_6nP82!UU?Cm6=`jDbsdKmr&Gg>bc<qYe-_Md@y~BI;_c<4CFM0P~V8>Tg
zP5o&*zc=(RJem3R+XbuiNqn4ltwh&5?k$<ywg0HWy8<h#1+Q`ob#KJBeRk4h`S7+u
zLpG=^dvj@^)sgMY4To$Wl;-#A_|HfaK9%>@rsevB4Zjbk3oa<&&tTb}+24Pnl*?gR
z@U6$nQU~82I=AiVqnoM>_juwaJ^7d;fBe(*mwOGk(j8vpP55QF_MU%u|G`VVPUXxy
zcCqMXhP_LU);oKOx$gCT7ftTgM{Zvqp5l9Sf5Db(xBf^*CHpXBGG<bn;9~S+`_1!c
z^UY6*-`#I5Zoc{H<%@)EwfjHkZ2K4bTyyO`IUrhJeZKS3L!-UoZi)^!*Bb7eaK5z7
z$<UK+^V>k91vcqiUyAAqw*PBM`yslYzdm-+w?{Li6}-;#S4`sL*y~$VwB_8zjG`i$
z(|=z~|K;Z~$@R2hoI$a=tNv4U&-n+|PJR}=D5u3KuuQA|_tM2nykE-KyxV`^PGsVF
zPGAr(Dsfm`)2-4yQ-yg-P_cjgkAj9vL1t%9{e2p#KVc{1DZi<nRtncGr)}cAqm}+x
zEMenc@z49~=PCZ1Gvl{}&Ti9RfxrLMG91{<ye!gX*6|(Un-BgMf5u+0s%NrXW3j2>
zy9l|yr)zz3LT5xKW^zJ8_nKWp)c5Pp|1&)G*O+!I%fbMd<rq9&{an^LB{Ts5pj)hI

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/radiant_pylon.png b/src/main/resources/assets/bioms-of-infinity/textures/block/radiant_pylon.png
new file mode 100644
index 0000000000000000000000000000000000000000..d72683e7752e4a7f5967561f235540c21d8e7dad
GIT binary patch
literal 1018
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU_R*S;uumf=k4tJj47!y2kh6E
zYnMAqDXSftczaRq^Ss&7vv2OWDfD)_;*&LvY?`Lb+@1^1Dol8@o#hh0h)>4fi2<1*
zS*IV)c%*h)b9brs_PKA}&+4YHk-t&4efQ?=_SgDe-LqKneQ$o@`RDt;?|okTV~_m3
z=Y7r3ua?AK_e^}lz#}JqP2kZp(=(IHCb+Rq5SyU(l=()lpVgh$5n+@1*B!pPQlWbO
z+UI?#c?^7Y1x@N@Z=c^b_SM;A_}Txlsjsq3XHa~(`RuH4#tD&O$Nl$xpImJIpW!gW
z^`%P-UtQ2<_`=t-q40S2kN*9v2QG%`-<FF!oxc3s=E}dTc6<yzD3HC~#=kAuj{n|k
z&ttZKw1xB-%l{=EQ&VG{!FSF;l;`6O=kmfeXR|Hrlxyv(rOZE9U0(idR+P&j2Hm%I
zVS4(E501>tdly-#&06W_rspfr=fb;QQ}fKj*ZIfJnr`JdtO^uaadX3Dk1tYxou~g;
zRVmLff6kjF%kw)9pOx*2|JisscJG>RQ;x>U_x|&mb+_Qve;LmG%->`zoGwqCY!e&r
zolwy;Z*e};X8*$*w-vWB?)k@Xl-2TD<ZO>asvB-?7Floa;QpP}D|Y9`&sRlVw`?gt
z-uwUK^Z1OKud-6xuFT5L66BnJxhY2d-#<aSyq76Y-!9$wx$n#Cljlw?$uBV3mSW<o
zEVS3{@#EJkcdoq=RJi#9FjB70Unl~O2x=2*dIy%Z?X9_SN6uPr?|;v2`+t<Z`LR-*
zui(dLzJxOQ4>Ek;t+LGCJUQ2U{=v%Z2Xp=}ntE@Up!kAScSI-ew-P;)xB22#V}aj$
zR;xRdx(42HDX!+eeXn}v-`(3cm0q{w-g@@1!GWLmZZgc>SNCr9$`mV;!#);HDpILd
zB3*BV{#$o(7fHzN&FS25^T=Caon24W+T8RPzqU%>{d>haouogfRQ7Q<-*|R&h0ZyD
zi_F(I^&@tvoEJ*m+{wKlQ>wMnkLhr7#b3rUn_moz@7MY-&u7?u_gL5c`_ezOi)X8r
z%H~Bpc<{jcw$5~O=EHLrg+A2-M%BT98LW~oL#FPoc-QN^<mTHq_x^2o=u&?t{!jg(
z59u3L-8s5je(R%i@jMQR^CovIKko7Mne;klMu_8TL!J$L)=an@8~<o!1k)M4Zr7WU
zI;YNgt%@-UsBT><yCjft3F{KipA1o}_S^lJK6*_<vsp>A8JMRTJYD@<);T3K0RVz0
B>3IME

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/shadow_altar.png b/src/main/resources/assets/bioms-of-infinity/textures/block/shadow_altar.png
new file mode 100644
index 0000000000000000000000000000000000000000..00b0cedbb7b3185e0d3e86488df399fc2cef426b
GIT binary patch
literal 988
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU|#I$;uumf=k4sf{>q^e?ej1D
z*)O|%$?5d=hL+e#u|3CDh~KMt*jvB3^QO12%VHI&C9|hC)Z}pM{GIi3%jJ2GSugOG
z`3T;wy=ibh^!b-3Z{OS47OVN*(@O4nD45Jx^X-lFOBtm<dw%O0z7)9R!nB0h<MRvF
zh{Wc3_a8iYqk2ptplfTZ?xao=>!;#1n|^*>yYs({^?KRQ;i=R6&GsoJsxtm4eQ#}4
zCfDjD?Yr^=<Iz8tSf-bjJF&{l`FC#eRDaKi%&fCq$FCZ_J}rNLWy0Rj)V!*xZPjju
z`*|9I49&v#GdR4qTi;iwDAsK}ceeaxqj&x<bT7OvzZk_l;ruy6>%B$GlcK&~T;{)V
zgU{YlxqpotElwBDp0n3-NBWbGLc5r!rOgkryOVZG({OUU%Ji8#gEzKSADj}bG`Hjh
zTW-%q4bwL_{GPsGx%c1OPR)r`<g>TPrp;HPLi@C;MT&}brkNSI1>4=(XL?=2wjwq^
z^y443t!b?bt}lEUYxGp4{gpHi|I<IRLO}PtEU}f@?O?dy$IklnyMNz-I`i(HHh(iE
zo*}&Z({8!**Y>llD|234DyDTH`})S<o1SZ)+Y5g()%a&~Z=v)LhA+PuIZw+)p7@$|
zW96L(R@veiJH(wo|N7hTc(c*xqx|n>tLE^$Wze3NP@35Ncd~4f79ZC&vF&bRtG2Fs
zGG}|btB%<5O_P4amKVI%5IL6dEdAR1nsq)>sXc}l`xm<Vs5n?Pm`r4N$pDE!Va^GB
z3cl13bY|l7tAD&HQZnZKyZ;9QOY;kALw+{j`uf{kx2WJMe~jIoXHOscPvNgS^7-}T
zGqz@JEEZ*q>uW{#t*_QtT5vmG{PC|+nd+()7kv32UcP!hGP2^_!`F8?kIBhDWctI#
zkhlBXlwhaVcE>V$3^UfU$3FPqHuuye-dmGBZPMC)vAhkLcCNHyd#v*8nQAXeKm1Yi
zay&LqDss!qeFy!XyPd1%X!*vqe6r-9b=}Xe&zv2p%u#cvjCZNX&Ixb%@4Qm(JFat0
z%*{O9j>U=f&K%~b>_>*&>cJ1b{1N3kdg;yN3r>l(N8U3p>_50B_Q9e;r(e4kS^^VI
ziEUF{drDHt{SUugRxljbyYNZxWExlV#+Io{iA(Q=t}A!DqOBwAG|Qu*gdtOIFT>Xx
d|Ly*pKRfLn_9eeu4VY^gJYD@<);T3K0Ra0>&wT&@

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/block/shadow_slate.png b/src/main/resources/assets/bioms-of-infinity/textures/block/shadow_slate.png
new file mode 100644
index 0000000000000000000000000000000000000000..9fdfe08c3342b13e82c8d939ae2b71aaf38932be
GIT binary patch
literal 891
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEV0Q9!aSW-L^LBP@@hvwAxAR^6
ziYcs3_D+{gX8NUDP5%Es+3KY4F*Dt%g%g4ugjV;zW!;#>zH?dMi`zWa>n7Z|S$S{s
z8?LmtDTc=i4s2n(x2IBju5-)h&-V+KIC~_sdazG;_JDQE>%6SFMa9O<JPR!B<Su8G
z&hWYS`PJ3+-;dSR=I`92*yR+r?@w!3w(;MmPpx;w@-ICgarojzf&21r)~={`Ufb}q
z=G4oV{#&AQA5}Pt#1<BPdh92xc5;$Jh2N}otCXe&?Wy=E#gOckwwcq*^2={W=Tw`y
zw{!zUSdUF%sJJKS_@QR`$sSF^V-J2iPfCfjcGGNs_@U=$(!V1o&IbMFl;HE{Jj`u#
ze))a*3$MSH&(iS>`%+~$*KfMbd4ppMrreUc{&L5Y%5S+Rr5A-YyyyS0M|o0;r%3CU
z-;B)%Igd#k`ta!9jotAolT$pWEj{wFY0-(u^~qJX_4`F@l%ttWZBjUGvhH=L(z46^
zJZ$RUzkSl3eDe3J(s|j(9?xg=xGd_qX^rTDQm5^&&0<eaUSZ3;Zhif74Kw+Ri!@eU
z{xd&feX`YDeb=4q+-I%Zc5G^@qsUo~rpL?E@}{gkCA0i!hDn;)Z|38HIdaYRHdcW$
z_v3Sy%E&DDo%S;8^&LC5`L@z;Yu3GyPVF)LcKiY(I5v)PP2f}L6;+URkkWRrYA^|F
zC}GH4!|;;fQUv2A#w8n>mM}x2jcA2w-Up8N2S2I^jP+kG-?3=*E32+Uum0}VEt)?4
zJ;!10b?fvv4i|6n`#y8G;Wm~X>)NkzGNeW>nzCwL;$@GwyY5|c*>2mCp1xkP_t=@|
z_3sSJift4UHdjTdSImq5${?Mrar)E6eFy&sYrjd(2`w`JQ#JR&uG%go_tzpzL*Bls
z_no!wMOpRP<#(C4df&_|KWWr^P1Dgp>HOyNw;v=jmjCXMJ)USH^<KAR@)fQfw(LEc
zg);2d-+q31+0^S`LP3;uV66Pd?+$O1FO=Gbt=_-t-hJQSyO(Jc-FkbjUaH`}jfR46
za?E#c`~1~c@2$-IReksymv{RFaM+wZ$Q{uB@B7dFjLKzBDhH$|iUKnggQu&X%Q~lo
FCIIStr0M_w

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/entity/shadow_king.png b/src/main/resources/assets/bioms-of-infinity/textures/entity/shadow_king.png
new file mode 100644
index 0000000000000000000000000000000000000000..9db4d74691a7f437ea21e42b6cbb72e632b5d8c6
GIT binary patch
literal 1013
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEVBX{D;uumf=k4sX`O>Zu?elN0
zdHmyc-`gX;LBW&EwoGMu)p&`ygE?kL;lm^Mk28MdnLdqK%gHe`_=?Oewpk*R-{0_i
zy>;*F^|E}+@|wjhdCTrCcvJl8U0>YaXCKc*XzvY+%06p(jOE9ZTh}jHy6pJ=Lz?HM
zz@;BdOPD>1-?7e!GhgjD^EvzeMO)o8k50X#+tg@qI(z%htv{|#-1vXb_TP^r&wqPY
zT>Q|R=@|=yz5U;55gNQ2TizMW-E*cSsjg&m6}JuRpKYJHuj|)&UEm4c@-HR1zIF9x
zdHK}|J9i!Rd1ZTQ>)U%Oyr~<e{FiCyyZ!9rv;H1QwV4rh9+xdF=S45LT6iIky`iLJ
z+RQ7DHg@gIlMdg0QdL|de7ntYpt|YH@;1cQRUJBU_-HZfp2>e3+*_@eC~fvp)tkuS
zFTeUmVs3lL6Q+e9EqcRv*TznHRW8G+wlVrzy|<l;4Xcm(Gf(&D8lmQq_p2SO$|lyN
zafa_+Blb>C@^#ks?>j^8E_x;tw1vy$c4^$T@1AZ&wO>u89{0@IU&|CVm#yrwlH4hS
zxiiv@tWKXgR{q4;+x^=o?P=HZnD2VtJj-Q%?=RDfb!|nZr-K_(r*p7RR-SS0_T!(X
zHaCBDx~=AO*nL?c!;MXB)fN5@mf*dwT{KQ7<}S~V*?sxR&x6j-E?xJVRk`BJ+J*xW
z6SQ~Ewz;{leWA~kAf31$83_xEN++j0`5Kuhq4xM0%h$B0y=xa=xRsjs>DR{dQv(-o
zxpu2w(&{)k{vLBr;8W<;cd%+O*~jpb0TQVc3SL%E$W5QQDD*|F{hc54zW$wh@9VF7
z&G$Zs>lR&j%O0nDCw1!w=Kg;>oUdy38hyX;LRf%5b;Yf_A7r<;2C+?xePg?Qj!@@?
zkotxDt2w5Bn!j<v?+N$I-}f7Q`|v>|!7_Eh?F%!y&OF#98}oM2*6!Eas$(DgcT<^h
zB=f4<<cbqtzH+uTd(H_HZRo0XP@1#!=C+lVsZ)YnoL@G&#$PGx^jpH#XU$#ljjR3m
z;~QtWrUfUJebVX;lRd4sXv)K#e;So*k0iS_oZflx?9_Bdf5wdgVyE>U?vg#$!?3Yn
znp2@Dv#Z_jed&tp?H>JSo@d|uF`(`5DYl6Tz?kG%o_R6jwhzmq<x&M#D!4jYjrOd0
zFUY???j0}^9;dyy(ll4BZvBQ5j?5ayON>h_zcXE_{Qvt;{MAivFI`1WxdO8@gQu&X
J%Q~loCIG=`^J4%2

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/aurora_flare.png b/src/main/resources/assets/bioms-of-infinity/textures/item/aurora_flare.png
new file mode 100644
index 0000000000000000000000000000000000000000..06b03c1f2f058145c824041c694cc66098ee09f2
GIT binary patch
literal 1124
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEVA1w;aSW-L^LBQ=&y-S`1NP_d
zDzYZuJ@Hb9t;p};k7|$QWt0C1n}k36Wq!NM)vEZQlNR?y@!V@-s=3=97I@E^v^uUs
z-=tvj5v79%A0DtTI3ehypu*Va_TV6+zy1mCa(=TXmUY=S^UL>F%kBI9$F5rLMy|a|
z<h0ahhHMS9f-XuWMf{a{;o{xl#;p+LU=r2vQg4o3w8tgxe|O|we5{%FXVu4f)yvjh
z-z(x!b*}1C@wJa`*SuayYcXh8mQUHT#-*(0gGy#(=agyUD|a_XCe3(vi1jyr&fQJj
z-P6x)u&lgY&-dwb^nr)x>(~}-{VOG3`_XFV?avmm-%Q)>bk#L3oOp17VfXj^w2O=T
zleem@-qv|@!4H-lZf%7-+irY1!>9FD)mSczt9#-0{oVQg&nE7)?O))a%;4DQX0%=Q
z!R$xp(^c21buq4beQuLlp>U$2;GcV!`>JzF+?=ytovu*IQ_h|1>oP;=-A=KMIjXs`
zeeC98l1IZIIDOTeW3E@cZ`F)_x9?twU!4%@bgGtp=iS9ip07#IxpOw(eEsKIM`fVD
z;=Z3e;W24R-(Ic?))_M-mM=bi^5dV=2cBFGh>Sk8szpS_^Z1b?7FKiTef((nWmkQD
z&8znfkJb4Ds@_RFTo`Dw{hDC*w#s+e|F-f4XKcwYH)Y-v*Qnj6HLd-4^|fg)RI*;3
zV(5s<I~w<2*+BBxo<plFO17%9wqN#pby|K>y~*tTZU0yj3Njj;kAIu+%WK;!>B@jT
z^BUq;`A?MCe{pl&3HyeG$4a-XXW#f+X1DWaeqf1`c*EYA?jr4NZ7vrs)rqcFooW9o
zZ_>tmX6`?K3U|BT{8giN?Z@)kEpulopWLLA9pCoMFpA+K)1r$^9by8#Vh&pxGPW=*
zVs%-}Dxj+%rQ49fcrk;~g&USSNL2cf>%+-|=9=qm9!4(TCwzXo`@PR=`0KvvJzw3$
z_;m9j$!hZr#?`ug)1u_FR=0;YL~QO|R{x~^J<p=+(iu7HKE~viTubQm`y^HJeNKYo
zJO4K)Eqvk}+xWL$O`gRtogrgKT<_UmI_oAT-gzf@?AV<hF^5^C#qXED*tB$G$^ER)
zy&F$e%oR3ib-P^pnr)L#@z$40z##wiYj<YeTKDDGg-y>sJhAdhoMw9K$w%DrS3hzo
zcnWztE4_SC^r+xg<=dm*U%q_1WZ_P!z4sbapJ^U-EI-fH?2~Xn`OWRn7s;ii0X90a
z*}yz_OHy*L^MS*TM`q@V)NPk<KG;8ZrMx!Ztg5gd|63l-KWMSJ*Z8UHj6+Eb9Ne8t
zHt%k|_fJnQTE=d9(>^yt2cIWWucWj#xU6MWi|=kd=p7-kC&lmSGp4s|He_%@!anUD
h`-Eq|_n-gId(F>t%Nw(Ug22*)!PC{xWt~$(69B)`8vg(Q

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/bright_shard.png b/src/main/resources/assets/bioms-of-infinity/textures/item/bright_shard.png
new file mode 100644
index 0000000000000000000000000000000000000000..30580b45ff6f2d91fbeeac4292a05055a82d4167
GIT binary patch
literal 1060
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEV1DiC;uumf=k4t1oZwQKhW+c7
zb5A-e*mFUU`JvM8gARB0-e#FL({0A|Gc3Z>9h5G5d}EN{Nod-{{zR#`#fNFqf@2Pg
zRx|`Nx1GK)F*d^5th`WR^32#nmlIAui@NpraLndglRGbcTmJHY^{by-pFgpVukyS7
zB!2R`*H(f(Y!}Miqnz7*SaeL9Ho=W`g4hJLN6Z;+hbynGwE39AwricSMa6XU`&x@H
z#62;Wmy$|(zWe>;-0H3)H!r_<A;<9Ga(`dJpUI17nD*}2k@?2Dpyfwof9vNt{{-6@
z7cE}=^U-W?hAn?fdbjG^dN162BLCjKYfdkJO}DIHdUN~zr``8I$6gJeV;9|gG-=_c
zB>vgn@ehwoPj{|U`af;|UY1EgK^M0i@ay#Ke)0PC$Jw%0KjfmfO;6ky!4R>#jyZUl
zP0R7eoRjiC7}l`+EP3{c^;B6n%bC^sbCk{Nm)?K#{9D+h;Go*uhK3tutm|GisycTj
zGE6`1`f=6M9WjedETuL)UB3kAtJ%BX@7#Iu=E0@6!uJ2QnOD8<c)Rv#%kOU`^X|WU
z-rm-CVct>ZgiEEd|6iLQ>@?r{ZJSu!hUXVA+CDJ<|KLE}o;dxbv$y?vcK-I~iu7<x
z@99gK3%;LY@D_UX@|8U2W6itv-@p16{QBZP!??WefK9!t;<;m0`y)^83ctBMn>}y4
zbVIUySW=%6yQjH{PZg(&Ywy>a(S;TdOh3!}FW9?Pa{cw!vqjfyKCDW&X5ALD=31o4
zdQHPUjsK<_>|s%2{hG`n>cASnxP)~{AoU1Njtw8bme$n1D!yOVn9G@;fBVVpdmBrY
zLznwAC7*tIY-ajgFJLI{*-^!M{$_Dzkx5H{bp;EH$LTW<Z_WSY?A)9&t8MYdbKm!D
z-q?5M&7KD4-u23Mk);#wK5f78?O2;Y7CZlAhI6YKETpnDD}G73wY3-a_B|@wEh#7W
z?4qQxx@|_#r=(r^rLD&-PO#`a^7im~cx}D;#nQQLyR=i%o?pCw-P?P!@aCIuqFJpZ
z?Zf7)r+&N?@Pln`1B2S+PF8N=ot29xtGU~*pPIL9`*U-d@a&6cq$0P~9A@s-Uw5T+
z?v3`xH|jrRoOs&Y_|WLwmL8coy<h*>89Dj*=wwP-zPZ0yxclg#X>U{8*k}ESZ~8CX
zCg1#Wre#gpqhz5;;*1*-5|v{2$1LB!z5QnKv$jx!D-vuG)8@J6`kG2c?mTcK)$p>^
zd7kW=h^L1dqqKE&6??f9bQOG$up7Aky8rw?L!zXO|0#oI*MPa7!PC{xWt~$(698UY
B0u2BF

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/dark_veil.png b/src/main/resources/assets/bioms-of-infinity/textures/item/dark_veil.png
new file mode 100644
index 0000000000000000000000000000000000000000..a9e276ec7321a5f42efaf69eb1b73413cf99b94c
GIT binary patch
literal 953
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU~ceqaSW-L^LF;#{99oX?ef-r
zvbU8jPI|p)TeM)y)Kx2^c6Vo*|9-6=x_9;#k8X$9&5Im3R3{vfnBD*5P1CWgmenp&
zZ&DxGgv;E1{=vHcoS|D)uEtW4>>kz+pPsJ2Wa(mI`I9%;s>LL#p@bpxT3o}_@(p3t
z-LJ(M0=xuSev5SfzWH<YYBO>1`ofYg#?!W1URU?c*POblB5q>UUs?UQKTHQwj27Me
zGui7YyUyvjS4ZT$*D)M6u(YUPJ)>4!R@Ri67obtYeIVgNa{6=YMJuLv{@ipvL*!!C
z)s<oQQ<Al&Udp<9<9_`%qsi^=IgFR@EC{h$ay^@I!ZJ;-r7Vs!4=$K~`*>l^vdb6u
zCcphw-E}l*n^#z?`(0+4<LO47j2(;Y_U&)Z-R+~M{Au3eMJxKBvqtW|pPwk9<`@v?
z^NMxSZq{dkcXmqg=y^`+FnD7$w@;F9{l~uyOM|3(lcxmr9Cu!Ib$*&{sMr4bzT9f>
zS%>yN4rF>{aiq}3!BFn_&3k=|?3x|<@AJRA%dDq=e#gFd8@7iZG~nUmkH4HVub}j5
z+|JMs55#uto%`wK<@;~mhDz||7s%LKKi}oLXodat<KLMlsr<QPWN?;uo?Wfq_S*?I
za(X&{lupDlmY=Tt7P)bE^uf<vC05IS)J=#@pQSb}^}O$?ZMKtCcKvsq=Dadw>CH8T
z6+e{QHcIs?v;}#+w0F+#5mS(LkkWOqYJf!87KWD$mogYHF)q2tw1nAXF{=mr1UK#p
zd<wlJDV$}=`22b4p$)UQ`uo=}zx;E;R((CYl;^L%mf!ps^;Wm{m?03!+y8T%#4~MX
zb>bP$g1fnoD#Yx3^9^~LE%-Kn_7r-w>*&tLcduCZ`Qifg<S*v!k577YbfWfyb;tDk
zoNMaUSM!H?O<a~4rufe^ZRysNMMC;Bc3L?e|G4QxVNLUM(V2e7RXke~C3d_s=jW4h
z4bRE7t+}f;AzCBzw%p@FpGhrm-qoE?F;eO~e4gpqbo)E{>rBq_o_d;o+Iz1<5$le;
zMhiaA%OaQW9Qe#tvYYq7larI1?=<dPBl^#N;&0;@yKdjPQ?hB-gPUC*GyL3h^78&J
zXPkaEoJB+em>l-JeKRBVruNrm#}{4LdgziOBq%q3W9libul*-K`)uH;mHFl|z%0q&
M>FVdQ&MBb@0JnC%m;e9(

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/glowshroom_essence.png b/src/main/resources/assets/bioms-of-infinity/textures/item/glowshroom_essence.png
new file mode 100644
index 0000000000000000000000000000000000000000..cbc4b2f9c94097a4ff3f8f848e0bb913966f72cc
GIT binary patch
literal 1085
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU}5oeaSW-L^LBQ<&y-S`<MHS3
za-R7dag)(IL6EPIqii1I>9b2$>&E6<tW{WW!z3@W`1ID5U;U#~b+ay?nmW;PlKj+}
z*}7}zO!K~ez$`^wfrWMQ4rV3o1!Yy`Hh&%CZWbHV-TArlW9{G4`|t05-~9dg*5{RZ
z+iU$Um&T@xB{NpM`px!IMrqFu1Nq4%9GO!XUNT(LV0>sc``-T<<=69<{Aw)X%e{51
z;J(9)y?0N)<BL8~`y+T2*C~sN|BFLJrxgA>5y;S&SKqhoykDDL`Gb8ye(!DxN6oLO
zGtZr0FWDKlto7-A>AUIYKHdEoY*VvBX!22~ztLA^Ztv_qv?~0#?xoUQa^KtM2ZZdM
zzN12V-@-(`>GqwvniEsf`QpB_iml(<t-b$$<H?+3m#+v}z0S;f*mwNYqRV$x3}P60
ze`iPjY~h}qdZu@C3G=ia5nmp>*x@R5Z(Zuwb8C+rz0J_ky?tZV@vv9g{FC0CS@`}B
zD}&ARS)TD*nf9M||Iju6qC-Q&`Sz=J_ELL&xekjO-1x}c*=_9fTH<w#*_+ifHk?RE
z7x#>udHs#5?#Yx5i@RHTO6uOeWQ~1(+|7LDPChp_wwL+2?#45BSgLC~t@Yt=Zn&6W
z@a5N=#_um|KAI{wPcM-DpO7`RRMz*h!{r(C=N((RuDjyy+9$bMX(w*`zu%eWBWAp^
zvTx=$17)7=2YNGC@@y$(n6Uk$;<fjy6INWeP86&@w)V^RE%BSLU%%96t1R0flFlbr
zuFZHqHEB(;XQAHF%U61quWX$X<K7ZAQ;v<XZ&B%-d%-6&6c`+m&$?%*eQt66blUsp
ztEJa>+So8P<Y&wX7Og&6K9y<0n;5Up6O(U<_j2yk{3}-X@?GMR|LS=jkpdUnmUTT8
zJE0eG`25_vdy4ZpKMM&*1Z`lO{4}4@asT{TPT?7IH~ldS%dMZ2_@1FuHQM0#5rbFX
zH~*Q)?ioFi`#@9b&6u2wBY|7;-b`4Q=(|NYd$#!9cWRBxUhi60$8$Cbn!GMCE(v5>
z!tAk_#e;o<8|MT*g<c^ASqCXq2df4XuZ9u^SUMz9p#+Oh>bCFmix00)x$hbKG3}Mt
zwt(OlhhFFPCcQb4C{R$kO<baUoB7wW_JtEF&&hPXzPDt@H{N%ZW$f`bpNqZ(xlh=@
zlxB5%_Jo}i?pN7d^pr{DDQ=oL<L%pj&!Q)75_458SYpUA<6Tbvh4;(XRT%H$+i0ep
z9baK}>Y{RUAj8A->hpWH$xl9d=v3~y0(YnL4gaMR_p|*!y?O6MwKWZ^H}74z{BQi`
zz1LiRm-dv^25dfbNfF|I<JYVioBzK5T+ftpyd?Iz%lzBGVu8Wa)z4*}Q$iB}@|O$p

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/luminous_fiber.png b/src/main/resources/assets/bioms-of-infinity/textures/item/luminous_fiber.png
new file mode 100644
index 0000000000000000000000000000000000000000..aab5ce3d6e66225d13d5bcaac77c55c02e7d2380
GIT binary patch
literal 859
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU{>;UaSW-L^LBQ$M{uD`!~V@@
zU2nR&^eC-(lXmW9)Y@ZvQWQk57B~GAaA|U#!0Gx^;bw1#23ODt@r6~IRj=K?E6kMA
zI<2OfW~Q^|o>H`*wQYp*?S&lYK8FAJfA8P(Ie))>EIfDYfxYkb(z%>H%nN49W%3J#
zZDg3erNu<6VM_y$xOni<l+-ry|5bmUmp)7pzdF0T*D^jh%=KZ)b@}IBNw;Jl%z3ip
zeWiZ9yBouW(z*ZU+0B_eCv9)5>Wp6;Iv;m&Y`0@wuzPWLtL4nJzU?f*%s;M+3hepH
z(ePlcJCHfU@}7_n?}n^gyS3%B7%GbNJJwsAKl5?ghj2!d*}DIF`g!^j%5NN>Gk@N!
zrnAco1uD56K7CoKmKk+Cp7q41otZoTN=WQII{jCX(7KQ7<9%ztde$6eEauTYmRMq7
zCbHOOzskOIXQR)ZdtANJD*Euox9k}<VeAL~eRda)o4tKw$FEnDV>n_rd)$mMiM?L>
zH93Q6F_Q<k2epaG0uL@++k0nkjq*Od(|3=&Jf-~c>&m<BJIkM{8I-+$|4Q>_h{)7U
z$!En*efH+q-nQn8S#Jx&yN2oO-hXPAw@)m;QF-l-p#A?fJDL3tcC|Qqo>O@x7xU=O
z-|jc7S3f<{C-r)b?-7dwlP~_=H}_x}lXO=HpIc|GWRiuMPl<uot20~f^Tj@hJ2d-V
zhv_l3$s7C)4sY%FH(jtKR{hGAw&e$ox0}DOxF>fkZTrNh#s3R4Uf)#{tKOs|Xg0fr
zVb(H3edFfq`c<6UTQu%&?rl5~ZPonthAf{=t2QtD(Y7R@!<*Jkwn>&^ml84${MRk<
zPNbB5PfN5@%}<%sQ(IDsnBt`P<{g~)WWk<omkKWQpKtijdwBi9IStca_lBQ55yx}j
z&KVx1yX!0N+aGxIv-nu(g)AQCl;6`Ye%m1F|L?`}y~{F}ob^)A4g0m@R4;qh`VFv@
iDQwqZcJaU6e_pMbm&)|!?@|Y58U{~SKbLh*2~7YskC9{m

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/shadow_crown.png b/src/main/resources/assets/bioms-of-infinity/textures/item/shadow_crown.png
new file mode 100644
index 0000000000000000000000000000000000000000..2a6b8a56d3183848f895e2ee4a9114635a91ba71
GIT binary patch
literal 1091
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEVBzv~aSW-L^LBQuM|8Tx@p?-`
zE9o;X($>C<LKl|`+jqrI6fA7*y%l2_Az2ZemKgAUPqyT4sp!2L#pbEzxrwt|Hhw)6
zyCq=d(Z=%0p)-4y8P;tvQ@cIuhv{lH^>p!b4W}h<nSD&Gs0**W|M}CL`@f&ts<X_S
zVd8t);=mJzm|b7CZfWP3u0P*-;<O3JI2@uJW--e<^xaFbusMF>#CMg+T3t!UUfcGc
z4Rfjg&stTz|JKHD_lt#v?F~)7=-S%GCv3gNu%qay@~Km+7y_=coIRU=`ND&f*XGUR
zzRQqzf8Vj2oA-){h&=q>U-<rBc}dx~H!B}pxniO2x5wMS!ZA5nnjvlT%ysL!8IC-b
zzO(12s+hN2X=#31hO~a)JLL`AwmB&YvM*Tn%tBZ9{hO5$Hv2qn_BjRzTOWL|<DFEu
zYJc!@yM&ya7e{-Hd){$o<k!z{Y&^emUEY#?|8%vq;_e4;oH;Xo<(ixYD_)pRoA%Eo
zRCvbOm)kWo3kADf<IdSQzhJv?;lV<n@%-}t4t?0rf9sZ*%{;%5(4)^^-`*G&diBb4
zhX-~OPsr5$m(bSkwyAsb{KdszTYg2q7rPt%-a1n(J6romlAsKqd2es-j=N`L_Wv`K
z^MBr#UOD^UKW>JMs7V<nKIPw+AGnq|W0ur)UImd^$MVY4lI_p?-m*TB(sc0PY8`!d
z#)@w_qO;dlTzC5XnbFHDX644ql|3_Op4?LU`gOgb(I@7$Ywu0}cupcyUBP~TLth`i
zq|6>Kzdlyizz<dD-$!W(?C^IzD!p>!(MhKlI-AY2<9%CEGRbr5wJ`msPfI259P3WL
zWa4XF$0M82!?1*Pi6PSjF-Sy9DKlg;W>Q1Yll#H7wb?cmABwYT9v@TZ;r|`<cz1d2
z%GbAbi#A;4fAjh4!_Qw04L(S6a~t3M0`v-_g-o89*fPc&cVgTFMVuDCyz(_bqvLd`
z&e{uQ{E6Y$UH#_U9iMA`KPAw*_ywB)-+89!*=tv2DaqY;2o(mV$<8BbtGNH{-*9`b
zj_%)yq7Qv0UsKQ6ZXFTxNA|*u`TP%xu5Q{Tr7Se_a7vJd?%F$BU%YvfFJl=rkN1Ah
z;>#Pd7p+*)lVNh`&><6b|FR8xWS*X!tkAXSg<QSDRi2fZQk9iI=U85zoBH+4g4-M4
zl<eYcUFNCs=*hEvO_yJ$m3(m*IqDOAyLwmamtP(K`CruWTFK<8sk>X&++cJlEY#c>
zG2`l0iPqL{wW4Rtb}>$w8v6OgMEU8fzs;8v4$D>yd%gPiif#51dk<X_x+KBq!R=A}
ifZ0Iy%l`BKd86e$KddrJd<QHX7(8A5T-G@yGywo*oBjI$

literal 0
HcmV?d00001

diff --git a/src/main/resources/assets/bioms-of-infinity/textures/item/shadow_heart.png b/src/main/resources/assets/bioms-of-infinity/textures/item/shadow_heart.png
new file mode 100644
index 0000000000000000000000000000000000000000..a8ad26257e0b1205ff22677bdf73bec2e825fe80
GIT binary patch
literal 921
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7T#lEU{3IKaSW-L^Y-@H{E$$I;~&q<
zE|1{4GHu(mAQqi{7qrY;GCCCv8}n{REG}HEUH<M*^c{(Rj6Oa`djrMR25L)9ZBRKT
zk-RWUqjvGqZ&NSL+^HAk{yOGTm$B`vd+)Q(ojp1E{m-+O=|(4u7hCitN6*mNBez%d
zmNG~B<L#+V-Ysgp3R@g9w$(7)T+$wVEcWBn2uGEonC()#zgRpD&0jb3_xJShzYi9j
z-}8j`YSw}3dlwf(s!W>xea7;wnd={HGV@Dfxc}mFllaveFLyCck1aU#l2=s5?1kst
zykD-f`6f)f_*Qhn<~POir%v5^|ItYI@jp)+rgEKAryIj^=Uv#jFv-%=@-$!NsSO8@
zSVo5SSv^z_e|LVz8I^Ype&=6*-516#TN1IkR$9yKQMfMOiqQOfYnt}-uzNkbnrZTS
zdwqJGnh<lw<-GZ3<}sz7``u-VT&6cQ**(8@Mpr|`o`3hVZJf?*Ix~#(Zpi)ies!G7
z=>Npu+f^D=yVHELuPpLy59|MRBGSENt>x+Z3y*m^j;8rozcpR+rY*6#lhH>ic=<x1
z*FTS|)bWbX*`6S#vopCp_O;log5bT!9_{d4E$FQJ`CZhfx%ykJ%l4m3U7Esfld=2x
zoG-1PH*HdysCW0Z*sh1SX6;teULDmd8GLlHaHq(VQj2X5tCwDKDU><>a{fYHA1Q~7
z#tTarTf{hgsn49k@?mS7bDdtF{kL_ee|10h{>3YKV7_kAnlH@XEuRa^zqp!wDMEGc
zX*W-X-l(omr{A4AvE%FXqdrn!H|*tX4Xfhtue`b0Z`X^<Tv^lmk1#CjNlx8ZEjwZR
z8in->6x74tFzpvFl{zzfWl!Nu&6mP!E+^z|?Jqynp|)1+>}(@Nq09?=@-7BmznZPJ
zKbO_xjp(|qw|j1@^;*7J!MZt5a;l(eUj3Sv%Ih}yP7j{CSx>o>(PZsC=1R-ZZJC!I
zRp0MQv3XpPv~Y>tqyNmE_RYOfJijhFujW0wwQRO&?!`HCv&=&`T)Ly&V0(;b{mpk*
zvvRg4Up`{iy(QdYi%Z5O1}E;8wA1VYxnHk8uV<I$eY8GrbC(D(%Q1Mm`njxgN@xNA
DU8J!w

literal 0
HcmV?d00001

diff --git a/src/main/resources/data/bioms-of-infinity/advancements/root.json b/src/main/resources/data/bioms-of-infinity/advancements/root.json
new file mode 100644
index 0000000000000000000000000000000000000000..c034980df55a889989022a59319a33a54cd89a0d
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/advancements/root.json
@@ -0,0 +1,20 @@
+{
+  "display": {
+    "icon": { "item": "bioms-of-infinity:glowshroom_essence" },
+    "title": { "translate": "advancement.biomsofinfinity.root.title" },
+    "description": { "translate": "advancement.biomsofinfinity.root.description" },
+    "background": "minecraft:textures/gui/advancements/backgrounds/end.png",
+    "frame": "task",
+    "show_toast": true,
+    "announce_to_chat": true,
+    "hidden": false
+  },
+  "criteria": {
+    "has_glowshroom": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [ { "item": "bioms-of-infinity:glowshroom_essence" } ]
+      }
+    }
+  }
+}
diff --git a/src/main/resources/data/bioms-of-infinity/advancements/shadow_altar.json b/src/main/resources/data/bioms-of-infinity/advancements/shadow_altar.json
new file mode 100644
index 0000000000000000000000000000000000000000..9d0458c8f9c152df4bc75a89d22e8f24a3e5c98a
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/advancements/shadow_altar.json
@@ -0,0 +1,20 @@
+{
+  "parent": "bioms-of-infinity:root",
+  "display": {
+    "icon": { "item": "bioms-of-infinity:shadow_altar" },
+    "title": { "translate": "advancement.biomsofinfinity.shadow_altar.title" },
+    "description": { "translate": "advancement.biomsofinfinity.shadow_altar.description" },
+    "frame": "goal",
+    "show_toast": true,
+    "announce_to_chat": true,
+    "hidden": false
+  },
+  "criteria": {
+    "altar": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [ { "item": "bioms-of-infinity:shadow_altar" } ]
+      }
+    }
+  }
+}
diff --git a/src/main/resources/data/bioms-of-infinity/advancements/shadow_crown.json b/src/main/resources/data/bioms-of-infinity/advancements/shadow_crown.json
new file mode 100644
index 0000000000000000000000000000000000000000..6efe3f33f31418508fd4fdc0a76dcea1a214c890
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/advancements/shadow_crown.json
@@ -0,0 +1,20 @@
+{
+  "parent": "bioms-of-infinity:root",
+  "display": {
+    "icon": { "item": "bioms-of-infinity:shadow_crown" },
+    "title": { "translate": "advancement.biomsofinfinity.shadow_crown.title" },
+    "description": { "translate": "advancement.biomsofinfinity.shadow_crown.description" },
+    "frame": "challenge",
+    "show_toast": true,
+    "announce_to_chat": true,
+    "hidden": false
+  },
+  "criteria": {
+    "crown": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [ { "item": "bioms-of-infinity:shadow_crown" } ]
+      }
+    }
+  }
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/aurora_glass.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/aurora_glass.json
new file mode 100644
index 0000000000000000000000000000000000000000..183deb167f4c93bd6a2ef979ce157088f36225f0
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/aurora_glass.json
@@ -0,0 +1,19 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:aurora_glass"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/glowshroom_plant.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/glowshroom_plant.json
new file mode 100644
index 0000000000000000000000000000000000000000..a06b0d9c2d8a5835ed46e7c804c3188df48911eb
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/glowshroom_plant.json
@@ -0,0 +1,14 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:glowshroom_plant"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/luminous_fiber_block.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/luminous_fiber_block.json
new file mode 100644
index 0000000000000000000000000000000000000000..de8db68cf7154bbd8babd0a716ea37fc822a7fd5
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/luminous_fiber_block.json
@@ -0,0 +1,19 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:luminous_fiber_block"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/obsidian_bramble.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/obsidian_bramble.json
new file mode 100644
index 0000000000000000000000000000000000000000..5c4b18f28f98078ef78c6e882caf0a224c91a8f0
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/obsidian_bramble.json
@@ -0,0 +1,14 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:obsidian_bramble"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/radiant_pylon.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/radiant_pylon.json
new file mode 100644
index 0000000000000000000000000000000000000000..96b9f83501e921abc32a9157b0074d8d7e3d909b
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/radiant_pylon.json
@@ -0,0 +1,19 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:radiant_pylon"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/shadow_altar.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/shadow_altar.json
new file mode 100644
index 0000000000000000000000000000000000000000..a46a7e6e9019c2750741ba00eed09f89b20e18dd
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/shadow_altar.json
@@ -0,0 +1,19 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:shadow_altar"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/shadow_slate.json b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/shadow_slate.json
new file mode 100644
index 0000000000000000000000000000000000000000..d111cb45a74313a827e79b0906ff01c4e636e986
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/blocks/shadow_slate.json
@@ -0,0 +1,19 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:shadow_slate"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/loot_tables/entities/shadow_king.json b/src/main/resources/data/bioms-of-infinity/loot_tables/entities/shadow_king.json
new file mode 100644
index 0000000000000000000000000000000000000000..7ad7f28baea29b48d19a6399127f79213007854c
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/loot_tables/entities/shadow_king.json
@@ -0,0 +1,14 @@
+{
+  "type": "minecraft:entity",
+  "pools": [
+    {
+      "rolls": 1,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "bioms-of-infinity:shadow_crown"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/main/resources/data/bioms-of-infinity/recipes/luminous_fiber_block.json b/src/main/resources/data/bioms-of-infinity/recipes/luminous_fiber_block.json
new file mode 100644
index 0000000000000000000000000000000000000000..112823fce9de9993252f68e55cc688f7b0a0cb4e
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/recipes/luminous_fiber_block.json
@@ -0,0 +1,16 @@
+{
+  "type": "minecraft:crafting_shaped",
+  "pattern": [
+    "FF",
+    "FF"
+  ],
+  "key": {
+    "F": {
+      "item": "bioms-of-infinity:luminous_fiber"
+    }
+  },
+  "result": {
+    "item": "bioms-of-infinity:luminous_fiber_block",
+    "count": 4
+  }
+}
diff --git a/src/main/resources/data/bioms-of-infinity/recipes/radiant_pylon.json b/src/main/resources/data/bioms-of-infinity/recipes/radiant_pylon.json
new file mode 100644
index 0000000000000000000000000000000000000000..f683bc4e9b2509c8528b9457b7fd801379e7ce6d
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/recipes/radiant_pylon.json
@@ -0,0 +1,15 @@
+{
+  "type": "minecraft:crafting_shaped",
+  "pattern": [
+    " G ",
+    " G ",
+    " Q "
+  ],
+  "key": {
+    "G": { "item": "bioms-of-infinity:aurora_glass" },
+    "Q": { "item": "bioms-of-infinity:luminous_fiber_block" }
+  },
+  "result": {
+    "item": "bioms-of-infinity:radiant_pylon"
+  }
+}
diff --git a/src/main/resources/data/bioms-of-infinity/recipes/shadow_altar.json b/src/main/resources/data/bioms-of-infinity/recipes/shadow_altar.json
new file mode 100644
index 0000000000000000000000000000000000000000..e09ab0310d1150429feb5b9a1d7991831bfdb1cf
--- /dev/null
+++ b/src/main/resources/data/bioms-of-infinity/recipes/shadow_altar.json
@@ -0,0 +1,16 @@
+{
+  "type": "minecraft:crafting_shaped",
+  "pattern": [
+    "SSS",
+    "L L",
+    "OOO"
+  ],
+  "key": {
+    "S": { "item": "bioms-of-infinity:shadow_slate" },
+    "L": { "item": "bioms-of-infinity:luminous_fiber" },
+    "O": { "item": "bioms-of-infinity:luminous_fiber_block" }
+  },
+  "result": {
+    "item": "bioms-of-infinity:shadow_altar"
+  }
+}
diff --git a/src/main/resources/fabric.mod.json b/src/main/resources/fabric.mod.json
index fe4f008996205baaea02323be2c94107154195e1..f95703f7cdae7802ab8613cfacfb1824c28cb568 100644
--- a/src/main/resources/fabric.mod.json
+++ b/src/main/resources/fabric.mod.json
@@ -1,37 +1,36 @@
 {
 	"schemaVersion": 1,
 	"id": "bioms-of-infinity",
 	"version": "${version}",
 	"name": "Bioms-of-infinity",
-	"description": "This is an example description! Tell everyone what your mod is about!",
-	"authors": [
-		"Me!"
-	],
+        "description": "Transforms the End into a luminous archipelago with handcrafted biomes, ritual bosses, and lighttech crafting.",
+        "authors": [
+                "Bioms of Infinity Team"
+        ],
 	"contact": {
 		"homepage": "https://fabricmc.net/",
 		"sources": "https://github.com/FabricMC/fabric-example-mod"
 	},
 	"license": "CC0-1.0",
 	"icon": "assets/bioms-of-infinity/icon.png",
 	"environment": "*",
 	"entrypoints": {
 		"main": [
 			"net.liam.biomsofinfinity.Biomsofinfinity"
 		],
 		"fabric-datagen": [
 			"net.liam.biomsofinfinity.datagen.ModDataGeneration"
 		]
 	},
 	"mixins": [
 		"bioms-of-infinity.mixins.json"
 	],
 	"depends": {
 		"fabricloader": ">=0.17.2",
 		"minecraft": "~1.21.8",
 		"java": ">=21",
 		"fabric-api": "*"
 	},
-	"suggests": {
-		"another-mod": "*"
-	}
+        "suggests": {
+        }
 }
\ No newline at end of file
